;;;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: LLTHW; Base: 10 -*-
;;;; file: utils.lisp

;;;; Copyright (c) 2012--2014 "the Phoeron" Colin J.E. Lupton <//thephoeron.com>
;;;; See LICENSE for additional information.

(in-package :llthw)

;; Loop over contents of passed FILES list, build pages automatically
(defmacro create-book-pages (files)
  "Loop over contents of passed FILES list, build pages automatically at compile time."
  `(progn
     ,@(loop for file in (eval files)
             collect `(define-easy-handler (,(intern (format nil "~:@(llthw-book-~A~)" (pathname-name file))) :uri ,(format nil "/book/~(~A~)/" (pathname-name file))) ()
                        (llthw-page ()
                          (cl-who:with-html-output (hunchentoot::*standard-output*)
                            (str (3bmd:parse-and-print-to-stream ,(format nil "book/~(~A~)" (file-namestring file)) hunchentoot::*standard-output* :format :html))))))))

(defmacro create-reference-pages (files &key (section "reference"))
  "Loop over contents of passes FILES list, build pages automatically at compile time using REFERENCE-BASIC-PAGE template under folder labelled SECTION."
  `(progn
     ,@(loop for file in (eval files)
             collect `(define-easy-handler (,(intern (format nil "~:@(llthw-~A-~A-page~)" section (pathname-name file))) :uri ,(format nil "~(/~A/~A~)/" section (pathname-name file))) ()
                        (reference-basic-page ()
                          (cl-who:with-html-output (hunchentoot::*standard-output*)
                            (str (3bmd:parse-and-print-to-stream ,(format nil "~(~A/~A~)" section (file-namestring file)) hunchentoot::*standard-output* :format :html))))))))

;; Common Lisp Reference Symbols
;  Symbols labelled with <span class='label'>type</span>
;  - literals (not labelled, emphasized)
;  - wildcard (not labelled, emphasized)
;  - type-specifier (not labelled, emphasized)
;  - method-combination type (not labelled, emphasized)
;  - keyword parameter (not labelled, emphasized)
;  - format control: label-warning
;  - format control parameter: label-default
;  - functions: label-success
;  - generic functions: label-warning
;  - macros: label-danger
;  - reader-macros: label-danger
;  - specials: label-default
;  - variables: label-primary
;  - constants: label-info
(defparameter *cl-reference-symbols* (make-hash-table :test 'equalp :size 1200))

(setf (gethash "literal-double-quote" *cl-reference-symbols*) '(:text "\"" :label "literal" :clhs "Body/02_de.htm")
      (gethash "literal-single-quote" *cl-reference-symbols*) '(:text "\'" :label "literal" :clhs "Body/02_dc.htm")
      (gethash "literal-open-parens" *cl-reference-symbols*) '(:text "(" :label "literal" :clhs "Body/02_da.htm")
      (gethash "literal-parens" *cl-reference-symbols*) '(:text "()" :label "literal" :clhs "Body/02_b.htm")
      (gethash "literal-close-parens" *cl-reference-symbols*) '(:text ")" :label "literal" :clhs "Body/02_db.htm")
      (gethash "multiply" *cl-reference-symbols*) '(:text "*" :label "function" :clhs "Body/f_st.htm")
      ;(gethash "type-specifier-asterix" *cl-reference-symbols*) '(:text "*" :label "type-specifier" :clhs "Body/.htm")
      ;(gethash "wildcard-asterix" *cl-reference-symbols*) '(:text "\"...*...\"" :label "wildcard" :clhs "Body/.htm")
      (gethash "literal-asterix" *cl-reference-symbols*) '(:text "*" :label "variable" :clhs "Body/v__stst_.htm")
      (gethash "literal-double-asterix" *cl-reference-symbols*) '(:text "**" :label "variable" :clhs "Body/v__stst_.htm")
      (gethash "literal-triple-asterix" *cl-reference-symbols*) '(:text "***" :label "variable" :clhs "Body/v__stst_.htm")
      (gethash "earmuff-break-on-signals" *cl-reference-symbols*) '(:text "*break-on-signals*" :label "variable" :clhs "Body/v_break_.htm")
      (gethash "earmuff-compile-file-pathname" *cl-reference-symbols*) '(:text "*compile-file-pathname*" :label "variable" :clhs "Body/v_cmp_fi.htm")
      (gethash "earmuff-compile-file-truename" *cl-reference-symbols*) '(:text "*compile-file-truename*" :label "variable" :clhs "Body/v_cmp_fi.htm")
      (gethash "earmuff-compile-print" *cl-reference-symbols*) '(:text "*compile-print*" :label "variable" :clhs "Body/v_cmp_pr.htm")
      (gethash "earmuff-compile-verbose" *cl-reference-symbols*) '(:text "*compile-verbose*" :label "variable" :clhs "Body/v_cmp_pr.htm")
      (gethash "earmuff-debug-io" *cl-reference-symbols*) '(:text "*debug-io*" :label "variable" :clhs "Body/v_debug_.htm")
      (gethash "earmuff-debugger-hook" *cl-reference-symbols*) '(:text "*debugger-hook*" :label "variable" :clhs "Body/v_debugg.htm")
      (gethash "earmuff-default-pathname-defaults" *cl-reference-symbols*) '(:text "*default-pathname-defaults*" :label "variable" :clhs "Body/v_defaul.htm")
      (gethash "earmuff-error-output" *cl-reference-symbols*) '(:text "*error-output*" :label "variable" :clhs "Body/v_debug_.htm")
      (gethash "earmuff-features" *cl-reference-symbols*) '(:text "*features*" :label "variable" :clhs "Body/v_featur.htm")
      (gethash "earmuff-gensym-counter" *cl-reference-symbols*) '(:text "*gensym-counter*" :label "variable" :clhs "Body/v_gensym.htm")
      (gethash "earmuff-load-pathname" *cl-reference-symbols*) '(:text "*load-pathname*" :label "variable" :clhs "Body/v_ld_pns.htm")
      (gethash "earmuff-load-print" *cl-reference-symbols*) '(:text "*load-print*" :label "variable" :clhs "Body/v_ld_prs.htm")
      (gethash "earmuff-load-truename" *cl-reference-symbols*) '(:text "*load-truename*" :label "variable" :clhs "Body/v_ld_pns.htm")
      (gethash "earmuff-load-verbose" *cl-reference-symbols*) '(:text "*load-verbose*" :label "variable" :clhs "Body/v_ld_prs.htm")
      (gethash "earmuff-macroexpand-hook" *cl-reference-symbols*) '(:text "*macroexpand-hook*" :label "variable" :clhs "Body/v_mexp_h.htm")
      (gethash "earmuff-modules" *cl-reference-symbols*) '(:text "*modules*" :label "variable" :clhs "Body/v_module.htm")
      (gethash "earmuff-package" *cl-reference-symbols*) '(:text "*package*" :label "variable" :clhs "Body/v_pkg.htm")
      (gethash "earmuff-print-array" *cl-reference-symbols*) '(:text "*print-array*" :label "variable" :clhs "Body/v_pr_ar.htm")
      (gethash "earmuff-print-base" *cl-reference-symbols*) '(:text "*print-base*" :label "variable" :clhs "Body/v_pr_bas.htm")
      (gethash "earmuff-print-case" *cl-reference-symbols*) '(:text "*print-case*" :label "variable" :clhs "Body/v_pr_cas.htm")
      (gethash "earmuff-print-circle" *cl-reference-symbols*) '(:text "*print-circle*" :label "variable" :clhs "Body/v_pr_cir.htm")
      (gethash "earmuff-print-escape" *cl-reference-symbols*) '(:text "*print-escape*" :label "variable" :clhs "Body/v_pr_esc.htm")
      (gethash "earmuff-print-gensym" *cl-reference-symbols*) '(:text "*print-gensym*" :label "variable" :clhs "Body/v_pr_gen.htm")
      (gethash "earmuff-print-length" *cl-reference-symbols*) '(:text "*print-length*" :label "variable" :clhs "Body/v_pr_lev.htm")
      (gethash "earmuff-print-level" *cl-reference-symbols*) '(:text "*print-level*" :label "variable" :clhs "Body/v_pr_lev.htm")
      (gethash "earmuff-print-lines" *cl-reference-symbols*) '(:text "*print-lines*" :label "variable" :clhs "Body/v_pr_lin.htm")
      (gethash "earmuff-print-miser-width" *cl-reference-symbols*) '(:text "*print-miser-width*" :label "variable" :clhs "Body/v_pr_mis.htm")
      (gethash "earmuff-print-pprint-dispatch" *cl-reference-symbols*) '(:text "*print-pprint-dispatch*" :label "variable" :clhs "Body/v_pr_ppr.htm")
      (gethash "earmuff-print-pretty" *cl-reference-symbols*) '(:text "*print-pretty*" :label "variable" :clhs "Body/v_pr_pre.htm")
      (gethash "earmuff-print-radix" *cl-reference-symbols*) '(:text "*print-radix*" :label "variable" :clhs "Body/v_pr_bas.htm")
      (gethash "earmuff-print-readably" *cl-reference-symbols*) '(:text "*print-readably*" :label "variable" :clhs "Body/v_pr_rda.htm")
      (gethash "earmuff-print-right-margin" *cl-reference-symbols*) '(:text "*print-right-margin*" :label "variable" :clhs "Body/v_pr_rig.htm")
      (gethash "earmuff-query-io" *cl-reference-symbols*) '(:text "*query-io*" :label "variable" :clhs "Body/v_debug_.htm")
      (gethash "earmuff-random-state" *cl-reference-symbols*) '(:text "*random-state*" :label "variable" :clhs "Body/v_rnd_st.htm")
      (gethash "earmuff-read-base" *cl-reference-symbols*) '(:text "*read-base*" :label "variable" :clhs "Body/v_rd_bas.htm")
      (gethash "earmuff-read-default-float-format" *cl-reference-symbols*) '(:text "*read-default-float-format*" :label "variable" :clhs "Body/v_rd_def.htm")
      (gethash "earmuff-read-eval" *cl-reference-symbols*) '(:text "*read-eval*" :label "variable" :clhs "Body/v_rd_eva.htm")
      (gethash "earmuff-read-suppress" *cl-reference-symbols*) '(:text "*read-suppress*" :label "variable" :clhs "Body/v_rd_sup.htm")
      (gethash "earmuff-readtable" *cl-reference-symbols*) '(:text "*readtable*" :label "variable" :clhs "Body/v_rdtabl.htm")
      (gethash "earmuff-standard-input" *cl-reference-symbols*) '(:text "*standard-input*" :label "variable" :clhs "Body/v_debug_.htm")
      (gethash "earmuff-standard-output" *cl-reference-symbols*) '(:text "*standard-output*" :label "variable" :clhs "Body/v_debug_.htm")
      (gethash "earmuff-terminal-io" *cl-reference-symbols*) '(:text "*terminal-io*" :label "variable" :clhs "Body/v_termin.htm")
      (gethash "earmuff-trace-output" *cl-reference-symbols*) '(:text "*trace-output*" :label "variable" :clhs "Body/v_debug_.htm")
      (gethash "add" *cl-reference-symbols*) '(:text "+" :label "function" :clhs "Body/a_pl.htm")
      ;(gethash "method-combination-plus-sign" *cl-reference-symbols*) '(:text "+" :label "method-combination type" :clhs "Body/.htm")
      (gethash "literal-plus-sign" *cl-reference-symbols*) '(:text "+" :label "variable" :clhs "Body/26_glo_s.htm#sign")
      (gethash "literal-double-plus-sign" *cl-reference-symbols*) '(:text "++" :label "variable" :clhs "Body/v_pl_plp.htm")
      (gethash "literal-triple-plus-sign" *cl-reference-symbols*) '(:text "+++" :label "variable" :clhs "Body/v_pl_plp.htm")
      (gethash "literal-comma" *cl-reference-symbols*) '(:text "," :label "literal" :clhs "Body/02_dg.htm")
      (gethash "literal-comma-dot" *cl-reference-symbols*) '(:text ",." :label "literal" :clhs "Body/02_dg.htm")
      (gethash "literal-comma-at" *cl-reference-symbols*) '(:text ",@" :label "literal" :clhs "Body/02_dg.htm")
      (gethash "minus" *cl-reference-symbols*) '(:text "-" :label "function" :clhs "Body/a__.htm")
      (gethash "literal-minus-sign" *cl-reference-symbols*) '(:text "-" :label "literal" :clhs "Body/26_glo_s.htm#sign")
      (gethash "literal-dot" *cl-reference-symbols*) '(:text "." :label "literal" :clhs "Body/02_cc.htm")
      (gethash "divide" *cl-reference-symbols*) '(:text "/" :label "function" :clhs "Body/a_sl.htm")
      (gethash "ratio-slash" *cl-reference-symbols*) '(:text "/" :label "literal" :clhs "Body/a_sl.htm")
      (gethash "literal-slash" *cl-reference-symbols*) '(:text "/" :label "variable" :clhs "Body/v_sl_sls.htm")
      (gethash "literal-double-slash" *cl-reference-symbols*) '(:text "//" :label "variable" :clhs "Body/v_sl_sls.htm")
      (gethash "literal-triple-slash" *cl-reference-symbols*) '(:text "///" :label "variable" :clhs "Body/v_sl_sls.htm")
      (gethash "not-equal" *cl-reference-symbols*) '(:text "/=" :label "function" :clhs "Body/f_eq_sle.htm")
      (gethash "literal-colon" *cl-reference-symbols*) '(:text ":" :label "literal" :clhs "Body/22_acca.htm")
      (gethash "literal-double-colon" *cl-reference-symbols*) '(:text "::" :label "literal" :clhs "Body/22_acca.htm")
      ;(gethash "colon-allow-other-keys" *cl-reference-symbols*) '(:text ":allow-other-keys" :label "keyword parameter" :clhs "Body/.htm")
      (gethash "literal-semicolon" *cl-reference-symbols*) '(:text ";" :label "literal" :clhs "Body/02_dd.htm")
      (gethash "literal-lt" *cl-reference-symbols*) '(:text "<" :label "function" :clhs "Body/f_eq_sle.htm")
      (gethash "literal-lt-equal" *cl-reference-symbols*) '(:text "<=" :label "function" :clhs "Body/f_eq_sle.htm")
      (gethash "loop-keyword-literal-equal" *cl-reference-symbols*) '(:text "=" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "literal-equal" *cl-reference-symbols*) '(:text "=" :label "function" :clhs "Body/f_eq_sle.htm")
      (gethash "literal-gt" *cl-reference-symbols*) '(:text ">" :label "function" :clhs "Body/f_eq_sle.htm")
      (gethash "literal-gt-equal" *cl-reference-symbols*) '(:text ">=" :label "function" :clhs "Body/f_eq_sle.htm")
      ;(gethash "literal-backslash" *cl-reference-symbols*) '(:text "\\" :label "literal" :clhs "Body/.htm")
      (gethash "literal-hash" *cl-reference-symbols*) '(:text "#" :label "format control parameter" :clhs "Body/02_dh.htm")
      (gethash "literal-hash-backslash" *cl-reference-symbols*) '(:text "#\\" :label "reader-macro" :clhs "Body/02_dha.htm")
      (gethash "literal-hash-quote" *cl-reference-symbols*) '(:text "#\'" :label "reader-macro" :clhs "Body/02_dhb.htm")
      (gethash "literal-hash-parens" *cl-reference-symbols*) '(:text "#(...)" :label "reader-macro" :clhs "Body/02_dhc.htm")
      (gethash "literal-hash-asterix" *cl-reference-symbols*) '(:text "#*" :label "reader-macro" :clhs "Body/02_dhd.htm")
      (gethash "literal-hash-plus-sign" *cl-reference-symbols*) '(:text "#+" :label "reader-macro" :clhs "Body/02_dhq.htm")
      (gethash "literal-hash-minus-sign" *cl-reference-symbols*) '(:text "#-" :label "reader-macro" :clhs "Body/02_dhr.htm")
      (gethash "literal-hash-dot" *cl-reference-symbols*) '(:text "#." :label "reader-macro" :clhs "Body/02_dhf.htm")
      (gethash "literal-hash-colon" *cl-reference-symbols*) '(:text "#:" :label "reader-macro" :clhs "Body/02_dhe.htm")
      (gethash "literal-hash-lt" *cl-reference-symbols*) '(:text "#<" :label "reader-macro" :clhs "Body/02_dht.htm")
      (gethash "literal-hash-equal" *cl-reference-symbols*) '(:text "#=" :label "reader-macro" :clhs "Body/02_dho.htm")
      (gethash "literal-hash-a" *cl-reference-symbols*) '(:text "#A" :label "reader-macro" :clhs "Body/02_dhl.htm")
      (gethash "literal-hash-b" *cl-reference-symbols*) '(:text "#B" :label "reader-macro" :clhs "Body/02_dhg.htm")
      (gethash "literal-hash-c-parens" *cl-reference-symbols*) '(:text "#C(...)" :label "reader-macro" :clhs "Body/02_dhk.htm")
      (gethash "literal-hash-o" *cl-reference-symbols*) '(:text "#O" :label "reader-macro" :clhs "Body/02_dhh.htm")
      (gethash "literal-hash-p" *cl-reference-symbols*) '(:text "#P" :label "reader-macro" :clhs "Body/02_dhn.htm")
      (gethash "literal-hash-r" *cl-reference-symbols*) '(:text "#R" :label "reader-macro" :clhs "Body/02_dhj.htm")
      (gethash "literal-hash-s-parens" *cl-reference-symbols*) '(:text "#S(...)" :label "reader-macro" :clhs "Body/02_dhm.htm")
      (gethash "literal-hash-x" *cl-reference-symbols*) '(:text "#X" :label "reader-macro" :clhs "Body/02_dhi.htm")
      (gethash "literal-double-hash" *cl-reference-symbols*) '(:text "##" :label "reader-macro" :clhs "Body/02_dhp.htm")
      (gethash "literal-hash-bar" *cl-reference-symbols*) '(:text "#|...|#" :label "reader-macro" :clhs "Body/02_dhs.htm")
      (gethash "ampersand-allow-other-keys" *cl-reference-symbols*) '(:text "&allow-other-keys" :label "constant" :clhs "Body/03_da.htm")
      (gethash "ampersand-aux" *cl-reference-symbols*) '(:text "&aux" :label "constant" :clhs "Body/03_da.htm")
      (gethash "ampersand-body" *cl-reference-symbols*) '(:text "&body" :label "constant" :clhs "Body/03_dd.htm")
      (gethash "ampersand-environment" *cl-reference-symbols*) '(:text "&environment" :label "constant" :clhs "Body/03_dd.htm")
      (gethash "ampersand-key" *cl-reference-symbols*) '(:text "&key" :label "constant" :clhs "Body/03_da.htm")
      (gethash "ampersand-optional" *cl-reference-symbols*) '(:text "&optional" :label "constant" :clhs "Body/03_da.htm")
      (gethash "ampersand-rest" *cl-reference-symbols*) '(:text "&rest" :label "constant" :clhs "Body/03_da.htm")
      (gethash "ampersand-whole" *cl-reference-symbols*) '(:text "&whole" :label "constant" :clhs "Body/03_dd.htm")
      (gethash "tilde-parens" *cl-reference-symbols*) '(:text "~( ... ~)" :label "format control" :clhs "Body/22_cha.htm")
      (gethash "tilde-asterix" *cl-reference-symbols*) '(:text "~*" :label "format control" :clhs "Body/22_cga.htm")
      (gethash "tilde-slashes" *cl-reference-symbols*) '(:text "~/ ... /" :label "format control" :clhs "Body/22_ced.htm")
      (gethash "tilde-lt-to-tilde-colon-gt" *cl-reference-symbols*) '(:text "~< ... ~:>" :label "format control" :clhs "Body/22_ceb.htm")
      (gethash "tilde-lt-to-tilde-gt" *cl-reference-symbols*) '(:text "~< ... ~>" :label "format control" :clhs "Body/22_cfb.htm")
      (gethash "tilde-question-mark" *cl-reference-symbols*) '(:text "~?" :label "format control" :clhs "Body/22_cgf.htm")
      (gethash "tilde-a" *cl-reference-symbols*) '(:text "~A" :label "format control" :clhs "Body/22_cda.htm")
      (gethash "tilde-b" *cl-reference-symbols*) '(:text "~B" :label "format control" :clhs "Body/22_cbc.htm")
      (gethash "tilde-c" *cl-reference-symbols*) '(:text "~C" :label "format control" :clhs "Body/22_caa.htm")
      (gethash "tilde-d" *cl-reference-symbols*) '(:text "~D" :label "format control" :clhs "Body/22_cbb.htm")
      (gethash "tilde-e" *cl-reference-symbols*) '(:text "~E" :label "format control" :clhs "Body/22_ccb.htm")
      (gethash "tilde-f" *cl-reference-symbols*) '(:text "~F" :label "format control" :clhs "Body/22_cca.htm")
      (gethash "tilde-g" *cl-reference-symbols*) '(:text "~G" :label "format control" :clhs "Body/22_ccc.htm")
      (gethash "tilde-i" *cl-reference-symbols*) '(:text "~I" :label "format control" :clhs "Body/22_cec.htm")
      (gethash "tilde-o" *cl-reference-symbols*) '(:text "~O" :label "format control" :clhs "Body/22_cbd.htm")
      (gethash "tilde-p" *cl-reference-symbols*) '(:text "~P" :label "format control" :clhs "Body/22_chc.htm")
      (gethash "tilde-r" *cl-reference-symbols*) '(:text "~R" :label "format control" :clhs "Body/22_cba.htm")
      (gethash "tilde-s" *cl-reference-symbols*) '(:text "~S" :label "format control" :clhs "Body/22_cdb.htm")
      (gethash "tilde-t" *cl-reference-symbols*) '(:text "~T" :label "format control" :clhs "Body/22_cfa.htm")
      (gethash "tilde-w" *cl-reference-symbols*) '(:text "~W" :label "format control" :clhs "Body/22_cdc.htm")
      (gethash "tilde-x" *cl-reference-symbols*) '(:text "~X" :label "format control" :clhs "Body/22_cbe.htm")
      (gethash "tilde-square-bracket" *cl-reference-symbols*) '(:text "~[...~]" :label "format control" :clhs "Body/22_cgb.htm")
      (gethash "tilde-dollar-sign" *cl-reference-symbols*) '(:text "~$" :label "format control" :clhs "Body/22_ccd.htm")
      (gethash "tilde-percent-sign" *cl-reference-symbols*) '(:text "~%" :label "format control" :clhs "Body/22_cab.htm")
      (gethash "tilde-ampersand" *cl-reference-symbols*) '(:text "~&" :label "format control" :clhs "Body/22_cac.htm")
      (gethash "tilde-circumflex" *cl-reference-symbols*) '(:text "~^" :label "format control" :clhs "Body/22_cib.htm")
      (gethash "tilde-underscore" *cl-reference-symbols*) '(:text "~_" :label "format control" :clhs "Body/22_cea.htm")
      (gethash "tilde-bar" *cl-reference-symbols*) '(:text "~|" :label "format control" :clhs "Body/22_cad.htm")
      (gethash "tilde-curly-braces" *cl-reference-symbols*) '(:text "~{...~}" :label "format control" :clhs "Body/22_cgd.htm")
      (gethash "tilde-tilde" *cl-reference-symbols*) '(:text "~~" :label "format control" :clhs "Body/22_cae.htm")
      (gethash "tilde-newline" *cl-reference-symbols*) '(:text "~#\\Newline" :label "format control" :clhs "Body/22_cic.htm")
      (gethash "tilde-semicolon" *cl-reference-symbols*) '(:text "~;" :label "format control" :clhs "Body/22_cia.htm")
      (gethash "literal-backtick" *cl-reference-symbols*) '(:text "\`" :label "literal" :clhs "Body/02_df.htm")
      (gethash "literal-hbars" *cl-reference-symbols*) '(:text "|...|" :label "literal" :clhs "Body/.htm")
      (gethash "literal-one-plus" *cl-reference-symbols*) '(:text "1+" :label "function" :clhs "Body/f_1pl_1_.htm")
      (gethash "literal-one-minus" *cl-reference-symbols*) '(:text "1-" :label "function" :clhs "Body/f_1pl_1_.htm")
      (gethash "abort" *cl-reference-symbols*) '(:text "abort" :label "function" :clhs "Body/a_abort.htm")
      (gethash "above" *cl-reference-symbols*) '(:text "above" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "abs" *cl-reference-symbols*) '(:text "abs" :label "function" :clhs "Body/f_abs.htm")
      (gethash "acons" *cl-reference-symbols*) '(:text "acons" :label "function" :clhs "Body/f_acons.htm")
      (gethash "acos" *cl-reference-symbols*) '(:text "acos" :label "function" :clhs "Body/f_asin_.htm")
      (gethash "acosh" *cl-reference-symbols*) '(:text "acosh" :label "function" :clhs "Body/f_sinh_.htm")
      (gethash "across" *cl-reference-symbols*) '(:text "across" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "add-method" *cl-reference-symbols*) '(:text "add-method" :label "generic function" :clhs "Body/f_add_me.htm")
      (gethash "adjoin" *cl-reference-symbols*) '(:text "adjoin" :label "function" :clhs "Body/f_adjoin.htm")
      (gethash "adjust-array" *cl-reference-symbols*) '(:text "adjust-array" :label "function" :clhs "Body/f_adjust.htm")
      (gethash "adjustable-array-p" *cl-reference-symbols*) '(:text "adjustable-array-p" :label "function" :clhs "Body/f_adju_1.htm")
      (gethash "allocate-instance" *cl-reference-symbols*) '(:text "allocate-instance" :label "generic function" :clhs "Body/f_alloca.htm")
      (gethash "alpha-char-p" *cl-reference-symbols*) '(:text "alpha-char-p" :label "function" :clhs "Body/f_alpha_.htm")
      (gethash "alphanumericp" *cl-reference-symbols*) '(:text "alphanumericp" :label "function" :clhs "Body/f_alphan.htm")
      (gethash "always" *cl-reference-symbols*) '(:text "always" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "macro-and" *cl-reference-symbols*) '(:text "and" :label "macro" :clhs "Body/a_and.htm")
      (gethash "loop-keyword-and" *cl-reference-symbols*) '(:text "and" :label "loop-keyword" :clhs "Body/m_loop.htm")
      ;(gethash "method-combination-and" *cl-reference-symbols*) '(:text "and" :label "method-combination type" :clhs "Body/.htm")
      ;(gethash "type-specifier-and" *cl-reference-symbols*) '(:text "and" :label "type-specifier" :clhs "Body/.htm")
      (gethash "function-append" *cl-reference-symbols*) '(:text "append" :label "function" :clhs "Body/f_append.htm")
      (gethash "loop-keyword-append" *cl-reference-symbols*) '(:text "append" :label "loop-keyword" :clhs "Body/m_loop.htm")
      ;(gethash "method-combination-append" *cl-reference-symbols*) '(:text "append" :label "method-combination type" :clhs "Body/.htm")
      (gethash "appending" *cl-reference-symbols*) '(:text "appending" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "apply" *cl-reference-symbols*) '(:text "apply" :label "function" :clhs "Body/f_apply.htm")
      (gethash "apropos" *cl-reference-symbols*) '(:text "apropos" :label "function" :clhs "Body/f_apropo.htm")
      (gethash "apropos-list" *cl-reference-symbols*) '(:text "apropos-list" :label "function" :clhs "Body/f_apropo.htm")
      (gethash "aref" *cl-reference-symbols*) '(:text "aref" :label "function" :clhs "Body/f_aref.htm")
      (gethash "arithmetic-error" *cl-reference-symbols*) '(:text "arithmetic-error" :label "condition" :clhs "Body/e_arithm.htm")
      (gethash "arithmetic-error-operands" *cl-reference-symbols*) '(:text "arithmetic-error-operands" :label "function" :clhs "Body/f_arithm.htm")
      (gethash "arithmetic-error-operation" *cl-reference-symbols*) '(:text "arithmetic-error-operation" :label "function" :clhs "Body/f_arithm.htm")
      (gethash "array" *cl-reference-symbols*) '(:text "array" :label "type-specifier" :clhs "Body/t_array.htm")
      (gethash "array-dimension" *cl-reference-symbols*) '(:text "array-dimension" :label "function" :clhs "Body/f_ar_dim.htm")
      (gethash "array-dimension-limit" *cl-reference-symbols*) '(:text "array-dimension-limit" :label "constant" :clhs "Body/v_ar_dim.htm")
      (gethash "array-dimensions" *cl-reference-symbols*) '(:text "array-dimensions" :label "function" :clhs "Body/f_ar_d_1.htm")
      (gethash "array-displacement" *cl-reference-symbols*) '(:text "array-displacement" :label "function" :clhs "Body/f_ar_dis.htm")
      (gethash "array-element-type" *cl-reference-symbols*) '(:text "array-element-type" :label "function" :clhs "Body/f_ar_ele.htm")
      (gethash "array-has-fill-pointer-p" *cl-reference-symbols*) '(:text "array-has-fill-pointer-p" :label "function" :clhs "Body/f_ar_has.htm")
      (gethash "array-in-bounds-p" *cl-reference-symbols*) '(:text "array-in-bounds-p" :label "function" :clhs "Body/f_ar_in_.htm")
      (gethash "array-rank" *cl-reference-symbols*) '(:text "array-rank" :label "function" :clhs "Body/f_ar_ran.htm")
      (gethash "array-rank-limit" *cl-reference-symbols*) '(:text "array-rank-limit" :label "constant" :clhs "Body/v_ar_ran.htm")
      (gethash "array-row-major-index" *cl-reference-symbols*) '(:text "array-row-major-index" :label "function" :clhs "Body/f_ar_row.htm")
      (gethash "array-total-size" *cl-reference-symbols*) '(:text "array-total-size" :label "function" :clhs "Body/f_ar_tot.htm")
      (gethash "array-total-size-limit" *cl-reference-symbols*) '(:text "array-total-size-limit" :label "constant" :clhs "Body/v_ar_tot.htm")
      (gethash "arrayp" *cl-reference-symbols*) '(:text "arrayp" :label "function" :clhs "Body/f_arrayp.htm")
      (gethash "as" *cl-reference-symbols*) '(:text "as" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "ash" *cl-reference-symbols*) '(:text "ash" :label "function" :clhs "Body/f_ash.htm")
      (gethash "asin" *cl-reference-symbols*) '(:text "asin" :label "function" :clhs "Body/f_asin_.htm")
      (gethash "asinh" *cl-reference-symbols*) '(:text "asinh" :label "function" :clhs "Body/f_sinh_.htm")
      (gethash "assert" *cl-reference-symbols*) '(:text "assert" :label "macro" :clhs "Body/m_assert.htm")
      (gethash "assoc" *cl-reference-symbols*) '(:text "assoc" :label "function" :clhs "Body/f_assocc.htm")
      (gethash "assoc-if" *cl-reference-symbols*) '(:text "assoc-if" :label "function" :clhs "Body/f_assocc.htm")
      (gethash "assoc-if-not" *cl-reference-symbols*) '(:text "assoc-if-not" :label "function" :clhs "Body/f_assocc.htm")
      (gethash "atan" *cl-reference-symbols*) '(:text "atan" :label "function" :clhs "Body/f_asin_.htm")
      (gethash "atanh" *cl-reference-symbols*) '(:text "atanh" :label "function" :clhs "Body/f_sinh_.htm")
      (gethash "atom" *cl-reference-symbols*) '(:text "atom" :label "function" :clhs "Body/a_atom.htm")
      (gethash "base-char" *cl-reference-symbols*) '(:text "base-char" :label "type-specifier" :clhs "Body/t_base_c.htm")
      (gethash "base-string" *cl-reference-symbols*) '(:text "base-string" :label "type-specifier" :clhs "Body/t_base_s.htm")
      (gethash "being" *cl-reference-symbols*) '(:text "being" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "below" *cl-reference-symbols*) '(:text "below" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "bignum" *cl-reference-symbols*) '(:text "bignum" :label "type-specifier" :clhs "Body/t_bignum.htm")
      (gethash "bit" *cl-reference-symbols*) '(:text "bit" :label "function" :clhs "Body/a_bit.htm")
      (gethash "bit-and" *cl-reference-symbols*) '(:text "bit-and" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-andc1" *cl-reference-symbols*) '(:text "bit-andc1" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-andc2" *cl-reference-symbols*) '(:text "bit-andc2" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-eqv" *cl-reference-symbols*) '(:text "bit-eqv" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-ior" *cl-reference-symbols*) '(:text "bit-ior" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-nand" *cl-reference-symbols*) '(:text "bit-nand" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-nor" *cl-reference-symbols*) '(:text "bit-nor" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-not" *cl-reference-symbols*) '(:text "bit-not" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-orc1" *cl-reference-symbols*) '(:text "bit-orc1" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-orc2" *cl-reference-symbols*) '(:text "bit-orc2" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "bit-vector" *cl-reference-symbols*) '(:text "bit-vector" :label "type-specifier" :clhs "Body/t_bt_vec.htm")
      (gethash "bit-vector-p" *cl-reference-symbols*) '(:text "bit-vector-p" :label "function" :clhs "Body/f_bt_vec.htm")
      (gethash "bit-xor" *cl-reference-symbols*) '(:text "bit-xor" :label "function" :clhs "Body/f_bt_and.htm")
      (gethash "block" *cl-reference-symbols*) '(:text "block" :label "special" :clhs "Body/s_block.htm")
      (gethash "boole" *cl-reference-symbols*) '(:text "boole" :label "function" :clhs "Body/f_boole.htm")
      (gethash "boole-1" *cl-reference-symbols*) '(:text "boole-1" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-2" *cl-reference-symbols*) '(:text "boole-2" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-and" *cl-reference-symbols*) '(:text "boole-and" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-andc1" *cl-reference-symbols*) '(:text "boole-andc1" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-andc2" *cl-reference-symbols*) '(:text "boole-andc2" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-c1" *cl-reference-symbols*) '(:text "boole-c1" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-c2" *cl-reference-symbols*) '(:text "boole-c2" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-clr" *cl-reference-symbols*) '(:text "boole-clr" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-eqv" *cl-reference-symbols*) '(:text "boole-eqv" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-ior" *cl-reference-symbols*) '(:text "boole-ior" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-nand" *cl-reference-symbols*) '(:text "boole-nand" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-nor" *cl-reference-symbols*) '(:text "boole-nor" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-orc1" *cl-reference-symbols*) '(:text "boole-orc1" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-orc2" *cl-reference-symbols*) '(:text "boole-orc2" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-set" *cl-reference-symbols*) '(:text "boole-set" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boole-xor" *cl-reference-symbols*) '(:text "boole-xor" :label "constant" :clhs "Body/v_b_1_b.htm")
      (gethash "boolean" *cl-reference-symbols*) '(:text "boolean" :label "type-specifier" :clhs "Body/t_ban.htm")
      (gethash "both-case-p" *cl-reference-symbols*) '(:text "both-case-p" :label "function" :clhs "Body/f_upper_.htm")
      (gethash "boundp" *cl-reference-symbols*) '(:text "boundp" :label "function" :clhs "Body/f_boundp.htm")
      (gethash "break" *cl-reference-symbols*) '(:text "break" :label "function" :clhs "Body/f_break.htm")
      (gethash "broadcast-stream" *cl-reference-symbols*) '(:text "broadcast-stream" :label "type-specifier" :clhs "Body/t_broadc.htm")
      (gethash "broadcast-stream-streams" *cl-reference-symbols*) '(:text "broadcast-stream-streams" :label "function" :clhs "Body/f_broadc.htm")
      (gethash "built-in-class" *cl-reference-symbols*) '(:text "built-in-class" :label "type-specifier" :clhs "Body/t_built_.htm")
      (gethash "butlast" *cl-reference-symbols*) '(:text "butlast" :label "function" :clhs "Body/f_butlas.htm")
      (gethash "by" *cl-reference-symbols*) '(:text "by" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "byte" *cl-reference-symbols*) '(:text "byte" :label "function" :clhs "Body/f_by_by.htm")
      (gethash "byte-position" *cl-reference-symbols*) '(:text "byte-position" :label "function" :clhs "Body/f_by_by.htm")
      (gethash "byte-size" *cl-reference-symbols*) '(:text "byte-size" :label "function" :clhs "Body/f_by_by.htm")
      (gethash "call-arguments-limit" *cl-reference-symbols*) '(:text "call-arguments-limit" :label "constant" :clhs "Body/v_call_a.htm")
      (gethash "call-method" *cl-reference-symbols*) '(:text "call-method" :label "macro" :clhs "Body/m_call_m.htm")
      (gethash "call-next-method" *cl-reference-symbols*) '(:text "call-next-method" :label "function" :clhs "Body/f_call_n.htm")
      (gethash "car" *cl-reference-symbols*) '(:text "car" :label "function" :clhs "Body/f_car_c.htm")
      (gethash "case" *cl-reference-symbols*) '(:text "case" :label "macro" :clhs "Body/m_case_.htm")
      (gethash "catch" *cl-reference-symbols*) '(:text "catch" :label "special" :clhs "Body/s_catch.htm")
      (gethash "ccase" *cl-reference-symbols*) '(:text "ccase" :label "macro" :clhs "Body/m_case_.htm")
      (gethash "cdr" *cl-reference-symbols*) '(:text "cdr" :label "function" :clhs "Body/f_car_c.htm")
      (gethash "c-x-r" *cl-reference-symbols*) '(:text "c*r" :label "function" :clhs "Body/f_car_c.htm")
      (gethash "ceiling" *cl-reference-symbols*) '(:text "ceiling" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "cell-error" *cl-reference-symbols*) '(:text "cell-error" :label "condition" :clhs "Body/e_cell_e.htm")
      (gethash "cell-error-name" *cl-reference-symbols*) '(:text "cell-error-name" :label "function" :clhs "Body/f_cell_e.htm")
      (gethash "cerror" *cl-reference-symbols*) '(:text "cerror" :label "function" :clhs "Body/f_cerror.htm")
      (gethash "change-class" *cl-reference-symbols*) '(:text "change-class" :label "generic function" :clhs "Body/f_chg_cl.htm")
      (gethash "char" *cl-reference-symbols*) '(:text "char" :label "function" :clhs "Body/f_char_.htm")
      (gethash "char-code" *cl-reference-symbols*) '(:text "char-code" :label "function" :clhs "Body/f_char_c.htm")
      (gethash "char-code-limit" *cl-reference-symbols*) '(:text "char-code-limit" :label "constant" :clhs "Body/v_char_c.htm")
      (gethash "char-downcase" *cl-reference-symbols*) '(:text "char-downcase" :label "function" :clhs "Body/f_char_u.htm")
      (gethash "char-equal" *cl-reference-symbols*) '(:text "char-equal" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-greaterp" *cl-reference-symbols*) '(:text "char-greaterp" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-int" *cl-reference-symbols*) '(:text "char-int" :label "function" :clhs "Body/f_char_i.htm")
      (gethash "char-lessp" *cl-reference-symbols*) '(:text "char-lessp" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-name" *cl-reference-symbols*) '(:text "char-name" :label "function" :clhs "Body/f_char_n.htm")
      (gethash "char-not-equal" *cl-reference-symbols*) '(:text "char-not-equal" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-not-greaterp" *cl-reference-symbols*) '(:text "char-not-greaterp" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-not-lessp" *cl-reference-symbols*) '(:text "char-not-lessp" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-upcase" *cl-reference-symbols*) '(:text "char-upcase" :label "function" :clhs "Body/f_char_u.htm")
      (gethash "char-literal-not-equal" *cl-reference-symbols*) '(:text "char/=" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-literal-lt" *cl-reference-symbols*) '(:text "char<" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-literal-lt-equal" *cl-reference-symbols*) '(:text "char<=" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-literal-equal" *cl-reference-symbols*) '(:text "char=" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-literal-gt" *cl-reference-symbols*) '(:text "char>" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "char-literal-gt-equal" *cl-reference-symbols*) '(:text "char>=" :label "function" :clhs "Body/f_chareq.htm")
      (gethash "character" *cl-reference-symbols*) '(:text "character" :label "function" :clhs "Body/a_ch.htm")
      (gethash "characterp" *cl-reference-symbols*) '(:text "characterp" :label "function" :clhs "Body/f_chp.htm")
      (gethash "check-type" *cl-reference-symbols*) '(:text "check-type" :label "macro" :clhs "Body/m_check_.htm")
      (gethash "cis" *cl-reference-symbols*) '(:text "cis" :label "function" :clhs "Body/f_cis.htm")
      ;(gethash "cl" *cl-reference-symbols*) '(:text "cl" :label "standard package" :clhs "Body/.htm")
      ;(gethash "cl-user" *cl-reference-symbols*) '(:text "cl-user" :label "standard package" :clhs "Body/.htm")
      (gethash "class" *cl-reference-symbols*) '(:text "class" :label "type-specifier" :clhs "Body/t_class.htm")
      (gethash "class-name" *cl-reference-symbols*) '(:text "class-name" :label "generic function" :clhs "Body/f_class_.htm")
      (gethash "class-of" *cl-reference-symbols*) '(:text "class-of" :label "function" :clhs "Body/f_clas_1.htm")
      (gethash "clear-input" *cl-reference-symbols*) '(:text "clear-input" :label "function" :clhs "Body/f_clear_.htm")
      (gethash "clear-output" *cl-reference-symbols*) '(:text "clear-output" :label "function" :clhs "Body/f_finish.htm")
      (gethash "close" *cl-reference-symbols*) '(:text "close" :label "function" :clhs "Body/f_close.htm")
      (gethash "clrhash" *cl-reference-symbols*) '(:text "clrhash" :label "function" :clhs "Body/f_clrhas.htm")
      (gethash "code-char" *cl-reference-symbols*) '(:text "code-char" :label "function" :clhs "Body/f_code_c.htm")
      (gethash "coerce" *cl-reference-symbols*) '(:text "coerce" :label "function" :clhs "Body/f_coerce.htm")
      (gethash "collect" *cl-reference-symbols*) '(:text "collect" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "collecting" *cl-reference-symbols*) '(:text "collecting" :label "loop-keyword" :clhs "Body/m_loop.htm")
      ;(gethash "common-lisp" *cl-reference-symbols*) '(:text "common-lisp" :label "standard package" :clhs "Body/.htm")
      ;(gethash "common-lisp-user" *cl-reference-symbols*) '(:text "common-lisp-user" :label "standard package" :clhs "Body/.htm")
      (gethash "compilation-speed" *cl-reference-symbols*) '(:text "compilation-speed" :label "declare expression" :clhs "Body/d_optimi.htm")
      (gethash "compile" *cl-reference-symbols*) '(:text "compile" :label "function" :clhs "Body/f_cmp.htm")
      (gethash "compile-file" *cl-reference-symbols*) '(:text "compile-file" :label "function" :clhs "Body/f_cmp_fi.htm")
      (gethash "compile-file-pathname" *cl-reference-symbols*) '(:text "compile-file-pathname" :label "function" :clhs "Body/f_cmp__1.htm")
      (gethash "compiled-function" *cl-reference-symbols*) '(:text "compiled-function" :label "type-specifier" :clhs "Body/t_cmpd_f.htm")
      (gethash "compiled-function-p" *cl-reference-symbols*) '(:text "compiled-function-p" :label "function" :clhs "Body/f_cmpd_f.htm")
      (gethash "compiler-macro" *cl-reference-symbols*) '(:text "compiler-macro" :label "type-specifier" :clhs "Body/f_docume.htm")
      (gethash "compiler-macro-function" *cl-reference-symbols*) '(:text "compiler-macro-function" :label "function" :clhs "Body/f_cmp_ma.htm")
      (gethash "complement" *cl-reference-symbols*) '(:text "complement" :label "function" :clhs "Body/f_comple.htm")
      (gethash "complex" *cl-reference-symbols*) '(:text "complex" :label "function" :clhs "Body/a_comple.htm")
      (gethash "complexp" *cl-reference-symbols*) '(:text "complexp" :label "function" :clhs "Body/f_comp_3.htm")
      (gethash "compute-applicable-methods" *cl-reference-symbols*) '(:text "compute-applicable-methods" :label "generic function" :clhs "Body/f_comput.htm")
      (gethash "compute-restarts" *cl-reference-symbols*) '(:text "compute-restarts" :label "function" :clhs "Body/f_comp_1.htm")
      (gethash "concatenate" *cl-reference-symbols*) '(:text "concatenate" :label "function" :clhs "Body/f_concat.htm")
      (gethash "concatenated-stream" *cl-reference-symbols*) '(:text "concatenated-stream" :label "type-specifier" :clhs "Body/t_concat.htm")
      (gethash "concatenated-stream-streams" *cl-reference-symbols*) '(:text "concatenated-stream-streams" :label "function" :clhs "Body/f_conc_1.htm")
      (gethash "cond" *cl-reference-symbols*) '(:text "cond" :label "macro" :clhs "Body/m_cond.htm")
      (gethash "condition" *cl-reference-symbols*) '(:text "condition" :label "condition" :clhs "Body/e_cnd.htm")
      (gethash "conjugate" *cl-reference-symbols*) '(:text "conjugate" :label "function" :clhs "Body/f_conjug.htm")
      (gethash "cons" *cl-reference-symbols*) '(:text "cons" :label "function" :clhs "Body/a_cons.htm")
      (gethash "consp" *cl-reference-symbols*) '(:text "consp" :label "function" :clhs "Body/f_consp.htm")
      (gethash "constantly" *cl-reference-symbols*) '(:text "constantly" :label "function" :clhs "Body/f_cons_1.htm")
      (gethash "constantp" *cl-reference-symbols*) '(:text "constantp" :label "function" :clhs "Body/f_consta.htm")
      (gethash "continue" *cl-reference-symbols*) '(:text "continue" :label "function" :clhs "Body/a_contin.htm")
      (gethash "control-error" *cl-reference-symbols*) '(:text "control-error" :label "condition" :clhs "Body/e_contro.htm")
      (gethash "copy-alist" *cl-reference-symbols*) '(:text "copy-alist" :label "function" :clhs "Body/f_cp_ali.htm")
      (gethash "copy-list" *cl-reference-symbols*) '(:text "copy-list" :label "function" :clhs "Body/f_cp_lis.htm")
      (gethash "copy-pprint-dispatch" *cl-reference-symbols*) '(:text "copy-pprint-dispatch" :label "function" :clhs "Body/f_cp_ppr.htm")
      (gethash "copy-readtable" *cl-reference-symbols*) '(:text "copy-readtable" :label "function" :clhs "Body/f_cp_rdt.htm")
      (gethash "copy-seq" *cl-reference-symbols*) '(:text "copy-seq" :label "function" :clhs "Body/f_cp_seq.htm")
      (gethash "copy-structure" *cl-reference-symbols*) '(:text "copy-structure" :label "function" :clhs "Body/f_cp_stu.htm")
      (gethash "copy-symbol" *cl-reference-symbols*) '(:text "copy-symbol" :label "function" :clhs "Body/f_cp_sym.htm")
      (gethash "copy-tree" *cl-reference-symbols*) '(:text "copy-tree" :label "function" :clhs "Body/f_cp_tre.htm")
      (gethash "cos" *cl-reference-symbols*) '(:text "cos" :label "function" :clhs "Body/f_sin_c.htm")
      (gethash "cosh" *cl-reference-symbols*) '(:text "cosh" :label "function" :clhs "Body/f_sinh_.htm")
      (gethash "loop-keyword-count" *cl-reference-symbols*) '(:text "count" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "count" *cl-reference-symbols*) '(:text "count" :label "function" :clhs "Body/f_countc.htm")
      (gethash "count-if" *cl-reference-symbols*) '(:text "count-if" :label "function" :clhs "Body/f_countc.htm")
      (gethash "count-if-not" *cl-reference-symbols*) '(:text "count-if-not" :label "function" :clhs "Body/f_countc.htm")
      (gethash "counting" *cl-reference-symbols*) '(:text "counting" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "ctypecase" *cl-reference-symbols*) '(:text "ctypecase" :label "macro" :clhs "Body/m_tpcase.htm")
      (gethash "debug" *cl-reference-symbols*) '(:text "debug" :label "declare expression" :clhs "Body/d_optimi.htm")
      (gethash "decf" *cl-reference-symbols*) '(:text "decf" :label "macro" :clhs "Body/m_incf_.htm")
      (gethash "declaim" *cl-reference-symbols*) '(:text "declaim" :label "macro" :clhs "Body/m_declai.htm")
      (gethash "declaration" *cl-reference-symbols*) '(:text "declaration" :label "declare expression" :clhs "Body/d_declar.htm")
      (gethash "declare" *cl-reference-symbols*) '(:text "declare" :label "declare expression" :clhs "Body/s_declar.htm")
      (gethash "decode-float" *cl-reference-symbols*) '(:text "decode-float" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "decode-universal-time" *cl-reference-symbols*) '(:text "decode-universal-time" :label "function" :clhs "Body/f_dec_un.htm")
      (gethash "defclass" *cl-reference-symbols*) '(:text "defclass" :label "macro" :clhs "Body/m_defcla.htm")
      (gethash "defconstant" *cl-reference-symbols*) '(:text "defconstant" :label "macro" :clhs "Body/m_defcon.htm")
      (gethash "defgeneric" *cl-reference-symbols*) '(:text "defgeneric" :label "macro" :clhs "Body/m_defgen.htm")
      (gethash "define-compiler-macro" *cl-reference-symbols*) '(:text "define-compiler-macro" :label "function" :clhs "Body/m_define.htm")
      (gethash "define-condition" *cl-reference-symbols*) '(:text "define-condition" :label "macro" :clhs "Body/m_defi_5.htm")
      (gethash "define-method-combination" *cl-reference-symbols*) '(:text "define-method-combination" :label "macro" :clhs "Body/m_defi_4.htm")
      (gethash "define-modify-macro" *cl-reference-symbols*) '(:text "define-modify-macro" :label "macro" :clhs "Body/m_defi_2.htm")
      (gethash "define-setf-expander" *cl-reference-symbols*) '(:text "define-setf-expander" :label "macro" :clhs "Body/m_defi_3.htm")
      (gethash "define-symbol-macro" *cl-reference-symbols*) '(:text "define-symbol-macro" :label "macro" :clhs "Body/m_defi_1.htm")
      (gethash "defmacro" *cl-reference-symbols*) '(:text "defmacro" :label "macro" :clhs "Body/m_defmac.htm")
      (gethash "defmethod" *cl-reference-symbols*) '(:text "defmethod" :label "macro" :clhs "Body/m_defmet.htm")
      (gethash "defpackage" *cl-reference-symbols*) '(:text "defpackage" :label "macro" :clhs "Body/m_defpkg.htm")
      (gethash "defparameter" *cl-reference-symbols*) '(:text "defparameter" :label "macro" :clhs "Body/m_defpar.htm")
      (gethash "defsetf" *cl-reference-symbols*) '(:text "defsetf" :label "macro" :clhs "Body/m_defset.htm")
      (gethash "defstruct" *cl-reference-symbols*) '(:text "defstruct" :label "macro" :clhs "Body/m_defstr.htm")
      (gethash "deftype" *cl-reference-symbols*) '(:text "deftype" :label "macro" :clhs "Body/m_deftp.htm")
      (gethash "defun" *cl-reference-symbols*) '(:text "defun" :label "macro" :clhs "Body/m_defun.htm")
      (gethash "defvar" *cl-reference-symbols*) '(:text "defvar" :label "macro" :clhs "Body/m_defpar.htm")
      (gethash "delete" *cl-reference-symbols*) '(:text "delete" :label "function" :clhs "Body/f_rm_rm.htm")
      (gethash "delete-duplicates" *cl-reference-symbols*) '(:text "delete-duplicates" :label "function" :clhs "Body/f_rm_dup.htm")
      (gethash "delete-file" *cl-reference-symbols*) '(:text "delete-file" :label "function" :clhs "Body/f_del_fi.htm")
      (gethash "delete-if" *cl-reference-symbols*) '(:text "delete-if" :label "function" :clhs "Body/f_rm_rm.htm")
      (gethash "delete-if-not" *cl-reference-symbols*) '(:text "delete-if-not" :label "function" :clhs "Body/f_rm_rm.htm")
      (gethash "delete-package" *cl-reference-symbols*) '(:text "delete-package" :label "function" :clhs "Body/f_del_pk.htm")
      (gethash "denominator" *cl-reference-symbols*) '(:text "denominator" :label "function" :clhs "Body/f_numera.htm")
      (gethash "deposit-field" *cl-reference-symbols*) '(:text "deposit-field" :label "function" :clhs "Body/f_deposi.htm")
      (gethash "describe" *cl-reference-symbols*) '(:text "describe" :label "function" :clhs "Body/f_descri.htm")
      (gethash "describe-object" *cl-reference-symbols*) '(:text "describe-object" :label "generic function" :clhs "Body/f_desc_1.htm")
      (gethash "destructuring-bind" *cl-reference-symbols*) '(:text "destructuring-bind" :label "macro" :clhs "Body/m_destru.htm")
      (gethash "digit-char" *cl-reference-symbols*) '(:text "digit-char" :label "function" :clhs "Body/f_digit_.htm")
      (gethash "digit-char-p" *cl-reference-symbols*) '(:text "digit-char-p" :label "function" :clhs "Body/f_digi_1.htm")
      (gethash "directory" *cl-reference-symbols*) '(:text "directory" :label "function" :clhs "Body/f_dir.htm")
      (gethash "directory-namestring" *cl-reference-symbols*) '(:text "directory-namestring" :label "function" :clhs "Body/f_namest.htm")
      (gethash "disassemble" *cl-reference-symbols*) '(:text "disassemble" :label "function" :clhs "Body/f_disass.htm")
      (gethash "division-by-zero" *cl-reference-symbols*) '(:text "division-by-zero" :label "condition" :clhs "Body/e_divisi.htm")
      (gethash "loop-keyword-do" *cl-reference-symbols*) '(:text "do" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "do" *cl-reference-symbols*) '(:text "do" :label "macro" :clhs "Body/m_do_do.htm")
      (gethash "do-asterix" *cl-reference-symbols*) '(:text "do*" :label "macro" :clhs "Body/m_do_do.htm")
      (gethash "do-all-symbols" *cl-reference-symbols*) '(:text "do-all-symbols" :label "macro" :clhs "Body/m_do_sym.htm")
      (gethash "do-external-symbols" *cl-reference-symbols*) '(:text "do-external-symbols" :label "macro" :clhs "Body/m_do_sym.htm")
      (gethash "do-symbols" *cl-reference-symbols*) '(:text "do-symbols" :label "macro" :clhs "Body/m_do_sym.htm")
      (gethash "documentation" *cl-reference-symbols*) '(:text "documentation" :label "generic function" :clhs "Body/f_docume.htm")
      (gethash "doing" *cl-reference-symbols*) '(:text "doing" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "dolist" *cl-reference-symbols*) '(:text "dolist" :label "macro" :clhs "Body/m_dolist.htm")
      (gethash "dotimes" *cl-reference-symbols*) '(:text "dotimes" :label "macro" :clhs "Body/m_dotime.htm")
      (gethash "double-float" *cl-reference-symbols*) '(:text "double-float" :label "type-specifier" :clhs "Body/t_short_.htm")
      (gethash "double-float-epsilon" *cl-reference-symbols*) '(:text "double-float-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "double-float-negative-epsilon" *cl-reference-symbols*) '(:text "double-float-negative-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "downfrom" *cl-reference-symbols*) '(:text "downfrom" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "downto" *cl-reference-symbols*) '(:text "downto" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "dpb" *cl-reference-symbols*) '(:text "dpb" :label "function" :clhs "Body/f_dpb.htm")
      (gethash "dribble" *cl-reference-symbols*) '(:text "dribble" :label "function" :clhs "Body/f_dribbl.htm")
      (gethash "dynamic-extent" *cl-reference-symbols*) '(:text "dynamic-extent" :label "declare expression" :clhs "Body/d_dynami.htm")
      (gethash "each" *cl-reference-symbols*) '(:text "each" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "ecase" *cl-reference-symbols*) '(:text "ecase" :label "macro" :clhs "Body/m_case_.htm")
      (gethash "echo-stream" *cl-reference-symbols*) '(:text "echo-stream" :label "type-specifier" :clhs "Body/t_echo_s.htm")
      (gethash "echo-stream-input-stream" *cl-reference-symbols*) '(:text "echo-stream-input-stream" :label "function" :clhs "Body/f_echo_s.htm")
      (gethash "echo-stream-output-stream" *cl-reference-symbols*) '(:text "echo-stream-output-stream" :label "function" :clhs "Body/f_echo_s.htm")
      (gethash "ed" *cl-reference-symbols*) '(:text "ed" :label "function" :clhs "Body/f_ed.htm")
      (gethash "eighth" *cl-reference-symbols*) '(:text "eighth" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "else" *cl-reference-symbols*) '(:text "else" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "elt" *cl-reference-symbols*) '(:text "elt" :label "function" :clhs "Body/f_elt.htm")
      (gethash "encode-universal-time" *cl-reference-symbols*) '(:text "encode-universal-time" :label "function" :clhs "Body/f_encode.htm")
      (gethash "end" *cl-reference-symbols*) '(:text "end" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "end-of-file" *cl-reference-symbols*) '(:text "end-of-file" :label "condition" :clhs "Body/e_end_of.htm")
      (gethash "endp" *cl-reference-symbols*) '(:text "endp" :label "function" :clhs "Body/f_endp.htm")
      (gethash "enough-namestring" *cl-reference-symbols*) '(:text "enough-namestring" :label "function" :clhs "Body/f_namest.htm")
      (gethash "ensure-directories-exist" *cl-reference-symbols*) '(:text "ensure-directories-exist" :label "function" :clhs "Body/f_ensu_1.htm")
      (gethash "ensure-generic-function" *cl-reference-symbols*) '(:text "ensure-generic-function" :label "function" :clhs "Body/f_ensure.htm")
      (gethash "eq" *cl-reference-symbols*) '(:text "eq" :label "function" :clhs "Body/f_eq.htm")
      (gethash "eql" *cl-reference-symbols*) '(:text "eql" :label "function" :clhs "Body/a_eql.htm")
      (gethash "equal" *cl-reference-symbols*) '(:text "equal" :label "function" :clhs "Body/f_equal.htm")
      (gethash "equalp" *cl-reference-symbols*) '(:text "equalp" :label "function" :clhs "Body/f_equalp.htm")
      (gethash "error" *cl-reference-symbols*) '(:text "error" :label "function" :clhs "Body/a_error.htm")
      (gethash "etypecase" *cl-reference-symbols*) '(:text "etypecase" :label "macro" :clhs "Body/m_tpcase.htm")
      (gethash "eval" *cl-reference-symbols*) '(:text "eval" :label "function" :clhs "Body/f_eval.htm")
      (gethash "eval-when" *cl-reference-symbols*) '(:text "eval-when" :label "special" :clhs "Body/s_eval_w.htm")
      (gethash "evenp" *cl-reference-symbols*) '(:text "evenp" :label "function" :clhs "Body/f_evenpc.htm")
      (gethash "every" *cl-reference-symbols*) '(:text "every" :label "function" :clhs "Body/f_everyc.htm")
      (gethash "exp" *cl-reference-symbols*) '(:text "exp" :label "function" :clhs "Body/f_exp_e.htm")
      (gethash "export" *cl-reference-symbols*) '(:text "export" :label "function" :clhs "Body/f_export.htm")
      (gethash "expt" *cl-reference-symbols*) '(:text "expt" :label "function" :clhs "Body/f_exp_e.htm")
      (gethash "extended-char" *cl-reference-symbols*) '(:text "extended-char" :label "type-specifier" :clhs "Body/t_extend.htm")
      (gethash "external-symbol" *cl-reference-symbols*) '(:text "external-symbol" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "external-symbols" *cl-reference-symbols*) '(:text "external-symbols" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "fboundp" *cl-reference-symbols*) '(:text "fboundp" :label "function" :clhs "Body/f_fbound.htm")
      (gethash "fceiling" *cl-reference-symbols*) '(:text "fceiling" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "fdefinition" *cl-reference-symbols*) '(:text "fdefinition" :label "function" :clhs "Body/f_fdefin.htm")
      (gethash "ffloor" *cl-reference-symbols*) '(:text "ffloor" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "fifth" *cl-reference-symbols*) '(:text "fifth" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "file-author" *cl-reference-symbols*) '(:text "file-author" :label "function" :clhs "Body/f_file_a.htm")
      (gethash "file-error" *cl-reference-symbols*) '(:text "file-error" :label "condition" :clhs "Body/e_file_e.htm")
      (gethash "file-error-pathname" *cl-reference-symbols*) '(:text "file-error-pathname" :label "function" :clhs "Body/f_file_e.htm")
      (gethash "file-length" *cl-reference-symbols*) '(:text "file-length" :label "function" :clhs "Body/f_file_l.htm")
      (gethash "file-namestring" *cl-reference-symbols*) '(:text "file-namestring" :label "function" :clhs "Body/f_namest.htm")
      (gethash "file-position" *cl-reference-symbols*) '(:text "file-position" :label "function" :clhs "Body/f_file_p.htm")
      (gethash "file-stream" *cl-reference-symbols*) '(:text "file-stream" :label "type-specifier" :clhs "Body/t_file_s.htm")
      (gethash "file-string-length" *cl-reference-symbols*) '(:text "file-string-length" :label "function" :clhs "Body/f_file_s.htm")
      (gethash "file-write-date" *cl-reference-symbols*) '(:text "file-write-date" :label "function" :clhs "Body/f_file_w.htm")
      (gethash "fill" *cl-reference-symbols*) '(:text "fill" :label "function" :clhs "Body/f_fill.htm")
      (gethash "fill-pointer" *cl-reference-symbols*) '(:text "fill-pointer" :label "function" :clhs "Body/f_fill_p.htm")
      (gethash "finally" *cl-reference-symbols*) '(:text "finally" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "find" *cl-reference-symbols*) '(:text "find" :label "function" :clhs "Body/f_find_.htm")
      (gethash "find-all-symbols" *cl-reference-symbols*) '(:text "find-all-symbols" :label "function" :clhs "Body/f_find_a.htm")
      (gethash "find-class" *cl-reference-symbols*) '(:text "find-class" :label "function" :clhs "Body/f_find_c.htm")
      (gethash "find-if" *cl-reference-symbols*) '(:text "find-if" :label "function" :clhs "Body/f_find_.htm")
      (gethash "find-if-not" *cl-reference-symbols*) '(:text "find-if-not" :label "function" :clhs "Body/f_find_.htm")
      (gethash "find-method" *cl-reference-symbols*) '(:text "find-method" :label "generic function" :clhs "Body/f_find_m.htm")
      (gethash "find-package" *cl-reference-symbols*) '(:text "find-package" :label "function" :clhs "Body/f_find_p.htm")
      (gethash "find-restart" *cl-reference-symbols*) '(:text "find-restart" :label "function" :clhs "Body/f_find_r.htm")
      (gethash "find-symbol" *cl-reference-symbols*) '(:text "find-symbol" :label "function" :clhs "Body/f_find_s.htm")
      (gethash "finish-output" *cl-reference-symbols*) '(:text "finish-output" :label "function" :clhs "Body/f_finish.htm")
      (gethash "first" *cl-reference-symbols*) '(:text "first" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "loop-keyword-fixnum" *cl-reference-symbols*) '(:text "fixnum" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "fixnum" *cl-reference-symbols*) '(:text "fixnum" :label "type-specifier" :clhs "Body/t_fixnum.htm")
      (gethash "flet" *cl-reference-symbols*) '(:text "flet" :label "special" :clhs "Body/s_flet_.htm")
      (gethash "loop-keyword-float" *cl-reference-symbols*) '(:text "float" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "float" *cl-reference-symbols*) '(:text "float" :label "function" :clhs "Body/a_float.htm")
      (gethash "float-digits" *cl-reference-symbols*) '(:text "float-digits" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "float-precision" *cl-reference-symbols*) '(:text "float-precision" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "float-radix" *cl-reference-symbols*) '(:text "float-radix" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "float-sign" *cl-reference-symbols*) '(:text "float-sign" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "floating-point-inexact" *cl-reference-symbols*) '(:text "floating-point-inexact" :label "condition" :clhs "Body/e_floa_1.htm")
      (gethash "floating-point-invalid-operation" *cl-reference-symbols*) '(:text "floating-point-invalid-operation" :label "condition" :clhs "Body/e_floati.htm")
      (gethash "floating-point-overflow" *cl-reference-symbols*) '(:text "floating-point-overflow" :label "condition" :clhs "Body/e_floa_2.htm")
      (gethash "floating-point-underflow" *cl-reference-symbols*) '(:text "floating-point-underflow" :label "condition" :clhs "Body/e_floa_3.htm")
      (gethash "floatp" *cl-reference-symbols*) '(:text "floatp" :label "function" :clhs "Body/f_floatp.htm")
      (gethash "floor" *cl-reference-symbols*) '(:text "floor" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "fmakunbound" *cl-reference-symbols*) '(:text "fmakunbound" :label "function" :clhs "Body/f_fmakun.htm")
      (gethash "for" *cl-reference-symbols*) '(:text "for" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "force-output" *cl-reference-symbols*) '(:text "force-output" :label "function" :clhs "Body/f_finish.htm")
      (gethash "format" *cl-reference-symbols*) '(:text "format" :label "function" :clhs "Body/f_format.htm")
      (gethash "formatter" *cl-reference-symbols*) '(:text "formatter" :label "macro" :clhs "Body/m_format.htm")
      (gethash "fourth" *cl-reference-symbols*) '(:text "fourth" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "fresh-line" *cl-reference-symbols*) '(:text "fresh-line" :label "function" :clhs "Body/f_terpri.htm")
      (gethash "from" *cl-reference-symbols*) '(:text "from" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "fround" *cl-reference-symbols*) '(:text "fround" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "ftruncate" *cl-reference-symbols*) '(:text "ftruncate" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "ftype" *cl-reference-symbols*) '(:text "ftype" :label "declare expression" :clhs "Body/d_ftype.htm")
      (gethash "funcall" *cl-reference-symbols*) '(:text "funcall" :label "function" :clhs "Body/f_funcal.htm")
      (gethash "function" *cl-reference-symbols*) '(:text "function" :label "special" :clhs "Body/a_fn.htm")
      (gethash "function-keywords" *cl-reference-symbols*) '(:text "function-keywords" :label "generic function" :clhs "Body/f_fn_kwd.htm")
      (gethash "function-lambda-expression" *cl-reference-symbols*) '(:text "function-lambda-expression" :label "function" :clhs "Body/f_fn_lam.htm")
      (gethash "functionp" *cl-reference-symbols*) '(:text "functionp" :label "function" :clhs "Body/f_fnp.htm")
      (gethash "gcd" *cl-reference-symbols*) '(:text "gcd" :label "function" :clhs "Body/f_gcd.htm")
      (gethash "generic-function" *cl-reference-symbols*) '(:text "generic-function" :label "type-specifier" :clhs "Body/t_generi.htm")
      (gethash "gensym" *cl-reference-symbols*) '(:text "gensym" :label "function" :clhs "Body/f_gensym.htm")
      (gethash "gentemp" *cl-reference-symbols*) '(:text "gentemp" :label "function" :clhs "Body/f_gentem.htm")
      (gethash "get" *cl-reference-symbols*) '(:text "get" :label "function" :clhs "Body/f_get.htm")
      (gethash "get-decoded-time" *cl-reference-symbols*) '(:text "get-decoded-time" :label "function" :clhs "Body/f_get_un.htm")
      (gethash "get-dispatch-macro-character" *cl-reference-symbols*) '(:text "get-dispatch-macro-character" :label "function" :clhs "Body/f_set__1.htm")
      (gethash "get-internal-real-time" *cl-reference-symbols*) '(:text "get-internal-real-time" :label "function" :clhs "Body/f_get_in.htm")
      (gethash "get-internal-run-time" *cl-reference-symbols*) '(:text "get-internal-run-time" :label "function" :clhs "Body/f_get__1.htm")
      (gethash "get-macro-character" *cl-reference-symbols*) '(:text "get-macro-character" :label "function" :clhs "Body/f_set_ma.htm")
      (gethash "get-output-stream-string" *cl-reference-symbols*) '(:text "get-output-stream-string" :label "function" :clhs "Body/f_get_ou.htm")
      (gethash "get-properties" *cl-reference-symbols*) '(:text "get-properties" :label "function" :clhs "Body/f_get_pr.htm")
      (gethash "get-setf-expansion" *cl-reference-symbols*) '(:text "get-setf-expansion" :label "function" :clhs "Body/f_get_se.htm")
      (gethash "get-universal-time" *cl-reference-symbols*) '(:text "get-universal-time" :label "function" :clhs "Body/f_get_un.htm")
      (gethash "getf" *cl-reference-symbols*) '(:text "getf" :label "function" :clhs "Body/f_getf.htm")
      (gethash "gethash" *cl-reference-symbols*) '(:text "gethash" :label "function" :clhs "Body/f_gethas.htm")
      (gethash "go" *cl-reference-symbols*) '(:text "go" :label "special" :clhs "Body/s_go.htm")
      (gethash "graphic-char-p" *cl-reference-symbols*) '(:text "graphic-char-p" :label "function" :clhs "Body/f_graphi.htm")
      (gethash "handler-bind" *cl-reference-symbols*) '(:text "handler-bind" :label "macro" :clhs "Body/m_handle.htm")
      (gethash "handler-case" *cl-reference-symbols*) '(:text "handler-case" :label "macro" :clhs "Body/m_hand_1.htm")
      (gethash "hash-key" *cl-reference-symbols*) '(:text "hash-key" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "hash-keys" *cl-reference-symbols*) '(:text "hash-keys" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "hash-table" *cl-reference-symbols*) '(:text "hash-table" :label "type-specifier" :clhs "Body/t_hash_t.htm")
      (gethash "hash-table-count" *cl-reference-symbols*) '(:text "hash-table-count" :label "function" :clhs "Body/f_hash_1.htm")
      (gethash "hash-table-p" *cl-reference-symbols*) '(:text "hash-table-p" :label "function" :clhs "Body/f_hash_t.htm")
      (gethash "hash-table-rehash-size" *cl-reference-symbols*) '(:text "hash-table-rehash-size" :label "function" :clhs "Body/f_hash_2.htm")
      (gethash "hash-table-rehash-threshold" *cl-reference-symbols*) '(:text "hash-table-rehash-threshold" :label "function" :clhs "Body/f_hash_3.htm")
      (gethash "hash-table-size" *cl-reference-symbols*) '(:text "hash-table-size" :label "function" :clhs "Body/f_hash_4.htm")
      (gethash "hash-table-test" *cl-reference-symbols*) '(:text "hash-table-test" :label "function" :clhs "Body/f_hash_5.htm")
      (gethash "hash-value" *cl-reference-symbols*) '(:text "hash-value" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "hash-values" *cl-reference-symbols*) '(:text "hash-values" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "host-namestring" *cl-reference-symbols*) '(:text "host-namestring" :label "function" :clhs "Body/f_namest.htm")
      (gethash "identify" *cl-reference-symbols*) '(:text "identify" :label "function" :clhs "Body/f_identi.htm")
      (gethash "if" *cl-reference-symbols*) '(:text "if" :label "special" :clhs "Body/s_if.htm")
      (gethash "loop-keyword-if" *cl-reference-symbols*) '(:text "if" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "ignorable" *cl-reference-symbols*) '(:text "ignorable" :label "declare expression" :clhs "Body/d_ignore.htm")
      (gethash "ignore" *cl-reference-symbols*) '(:text "ignore" :label "declare expression" :clhs "Body/d_ignore.htm")
      (gethash "ignore-errors" *cl-reference-symbols*) '(:text "ignore-errors" :label "macro" :clhs "Body/m_ignore.htm")
      (gethash "imagpart" *cl-reference-symbols*) '(:text "imagpart" :label "function" :clhs "Body/f_realpa.htm")
      (gethash "import" *cl-reference-symbols*) '(:text "import" :label "function" :clhs "Body/f_import.htm")
      (gethash "in" *cl-reference-symbols*) '(:text "in" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "in-package" *cl-reference-symbols*) '(:text "in-package" :label "macro" :clhs "Body/m_in_pkg.htm")
      (gethash "incf" *cl-reference-symbols*) '(:text "incf" :label "macro" :clhs "Body/m_incf_.htm")
      (gethash "initialize-instance" *cl-reference-symbols*) '(:text "initialize-instance" :label "generic function" :clhs "Body/f_init_i.htm")
      (gethash "initially" *cl-reference-symbols*) '(:text "initially" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "inline" *cl-reference-symbols*) '(:text "inline" :label "declare expression" :clhs "Body/d_inline.htm")
      (gethash "input-stream-p" *cl-reference-symbols*) '(:text "input-stream-p" :label "function" :clhs "Body/f_in_stm.htm")
      (gethash "inspect" *cl-reference-symbols*) '(:text "inspect" :label "function" :clhs "Body/f_inspec.htm")
      (gethash "integer" *cl-reference-symbols*) '(:text "integer" :label "type-specifier" :clhs "Body/t_intege.htm")
      (gethash "integer-decode-float" *cl-reference-symbols*) '(:text "integer-decode-float" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "integer-length" *cl-reference-symbols*) '(:text "integer-length" :label "function" :clhs "Body/f_intege.htm")
      (gethash "integerp" *cl-reference-symbols*) '(:text "integerp" :label "function" :clhs "Body/f_inte_1.htm")
      (gethash "interactive-stream-p" *cl-reference-symbols*) '(:text "interactive-stream-p" :label "function" :clhs "Body/f_intera.htm")
      (gethash "intern" *cl-reference-symbols*) '(:text "intern" :label "function" :clhs "Body/f_intern.htm")
      (gethash "internal-time-units-per-second" *cl-reference-symbols*) '(:text "internal-time-units-per-second" :label "constant" :clhs "Body/v_intern.htm")
      (gethash "intersection" *cl-reference-symbols*) '(:text "intersection" :label "function" :clhs "Body/f_isec_.htm")
      (gethash "into" *cl-reference-symbols*) '(:text "into" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "invalid-method-error" *cl-reference-symbols*) '(:text "invalid-method-error" :label "function" :clhs "Body/f_invali.htm")
      (gethash "invoke-debugger" *cl-reference-symbols*) '(:text "invoke-debugger" :label "function" :clhs "Body/f_invoke.htm")
      (gethash "invoke-restart" *cl-reference-symbols*) '(:text "invoke-restart" :label "function" :clhs "Body/f_invo_1.htm")
      (gethash "invoke-restart-interactively" *cl-reference-symbols*) '(:text "invoke-restart-interactively" :label "function" :clhs "Body/f_invo_2.htm")
      (gethash "isqrt" *cl-reference-symbols*) '(:text "isqrt" :label "function" :clhs "Body/f_sqrt_.htm")
      (gethash "it" *cl-reference-symbols*) '(:text "it" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "keyword" *cl-reference-symbols*) '(:text "keyword" :label "standard package" :clhs "Body/t_kwd.htm")
      (gethash "keywordp" *cl-reference-symbols*) '(:text "keywordp" :label "function" :clhs "Body/f_kwdp.htm")
      (gethash "labels" *cl-reference-symbols*) '(:text "labels" :label "special" :clhs "Body/s_flet_.htm")
      (gethash "lambda" *cl-reference-symbols*) '(:text "lambda" :label "macro" :clhs "Body/a_lambda.htm")
      (gethash "lambda-list-keywords" *cl-reference-symbols*) '(:text "lambda-list-keywords" :label "constant" :clhs "Body/v_lambda.htm")
      (gethash "lambda-parameters-limit" *cl-reference-symbols*) '(:text "lambda-parameters-limit" :label "constant" :clhs "Body/v_lamb_1.htm")
      (gethash "last" *cl-reference-symbols*) '(:text "last" :label "function" :clhs "Body/f_last.htm")
      (gethash "lcm" *cl-reference-symbols*) '(:text "lcm" :label "function" :clhs "Body/f_lcm.htm")
      (gethash "ldb" *cl-reference-symbols*) '(:text "ldb" :label "function" :clhs "Body/f_ldb.htm")
      (gethash "ldb-test" *cl-reference-symbols*) '(:text "ldb-test" :label "function" :clhs "Body/f_ldb_te.htm")
      (gethash "ldiff" *cl-reference-symbols*) '(:text "ldiff" :label "function" :clhs "Body/f_ldiffc.htm")
      (gethash "least-negative-double-float" *cl-reference-symbols*) '(:text "least-negative-double-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-long-float" *cl-reference-symbols*) '(:text "least-negative-long-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-normalized-double-float" *cl-reference-symbols*) '(:text "least-negative-normalized-double-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-normalized-long-float" *cl-reference-symbols*) '(:text "least-negative-normalized-long-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-normalized-short-float" *cl-reference-symbols*) '(:text "least-negative-normalized-short-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-normalized-single-float" *cl-reference-symbols*) '(:text "least-negative-normalized-single-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-short-float" *cl-reference-symbols*) '(:text "least-negative-short-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-negative-single-float" *cl-reference-symbols*) '(:text "least-negative-single-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-double-float" *cl-reference-symbols*) '(:text "least-positive-double-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-long-float" *cl-reference-symbols*) '(:text "least-positive-long-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-normalized-double-float" *cl-reference-symbols*) '(:text "least-positive-normalized-double-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-normalized-long-float" *cl-reference-symbols*) '(:text "least-positive-normalized-long-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-normalized-short-float" *cl-reference-symbols*) '(:text "least-positive-normalized-short-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-normalized-single-float" *cl-reference-symbols*) '(:text "least-positive-normalized-single-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-short-float" *cl-reference-symbols*) '(:text "least-positive-short-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "least-positive-single-float" *cl-reference-symbols*) '(:text "least-positive-single-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "length" *cl-reference-symbols*) '(:text "length" :label "function" :clhs "Body/f_length.htm")
      (gethash "let" *cl-reference-symbols*) '(:text "let" :label "special" :clhs "Body/s_let_l.htm")
      (gethash "let-asterix" *cl-reference-symbols*) '(:text "let*" :label "special" :clhs "Body/s_let_l.htm")
      (gethash "lisp-implementation-type" *cl-reference-symbols*) '(:text "lisp-implementation-type" :label "function" :clhs "Body/f_lisp_i.htm")
      (gethash "lisp-implementation-version" *cl-reference-symbols*) '(:text "lisp-implementation-version" :label "function" :clhs "Body/f_lisp_i.htm")
      (gethash "function-list" *cl-reference-symbols*) '(:text "list" :label "function" :clhs "Body/a_list.htm")
      ;(gethash "method-combination-list" *cl-reference-symbols*) '(:text "list" :label "method-combination type" :clhs "Body/.htm")
      (gethash "list-all-packages" *cl-reference-symbols*) '(:text "list-all-packages" :label "function" :clhs "Body/f_list_a.htm")
      (gethash "list-length" *cl-reference-symbols*) '(:text "list-length" :label "function" :clhs "Body/f_list_l.htm")
      (gethash "list-asterix" *cl-reference-symbols*) '(:text "list*" :label "function" :clhs "Body/f_list_.htm")
      (gethash "listen" *cl-reference-symbols*) '(:text "listen" :label "function" :clhs "Body/f_listen.htm")
      (gethash "listp" *cl-reference-symbols*) '(:text "listp" :label "function" :clhs "Body/f_listp.htm")
      (gethash "load" *cl-reference-symbols*) '(:text "load" :label "function" :clhs "Body/f_load.htm")
      (gethash "load-logical-pathname-translations" *cl-reference-symbols*) '(:text "load-logical-pathname-translations" :label "function" :clhs "Body/f_ld_log.htm")
      (gethash "load-time-value" *cl-reference-symbols*) '(:text "load-time-value" :label "special" :clhs "Body/s_ld_tim.htm")
      (gethash "locally" *cl-reference-symbols*) '(:text "locally" :label "special" :clhs "Body/s_locall.htm")
      (gethash "log" *cl-reference-symbols*) '(:text "log" :label "function" :clhs "Body/f_log.htm")
      (gethash "logand" *cl-reference-symbols*) '(:text "logand" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logandc1" *cl-reference-symbols*) '(:text "logandc1" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logandc2" *cl-reference-symbols*) '(:text "logandc2" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logbitp" *cl-reference-symbols*) '(:text "logbitp" :label "function" :clhs "Body/f_logbtp.htm")
      (gethash "logcount" *cl-reference-symbols*) '(:text "logcount" :label "function" :clhs "Body/f_logcou.htm")
      (gethash "logeqv" *cl-reference-symbols*) '(:text "logeqv" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logical-pathname" *cl-reference-symbols*) '(:text "logical-pathname" :label "function" :clhs "Body/a_logica.htm")
      (gethash "logical-pathname-translations" *cl-reference-symbols*) '(:text "logical-pathname-translations" :label "function" :clhs "Body/f_logica.htm")
      (gethash "logior" *cl-reference-symbols*) '(:text "logior" :label "function" :clhs "Body/f_logand.htm")
      (gethash "lognand" *cl-reference-symbols*) '(:text "lognand" :label "function" :clhs "Body/f_logand.htm")
      (gethash "lognor" *cl-reference-symbols*) '(:text "lognor" :label "function" :clhs "Body/f_logand.htm")
      (gethash "lognot" *cl-reference-symbols*) '(:text "lognot" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logorc1" *cl-reference-symbols*) '(:text "logorc1" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logorc2" *cl-reference-symbols*) '(:text "logorc2" :label "function" :clhs "Body/f_logand.htm")
      (gethash "logtest" *cl-reference-symbols*) '(:text "logtest" :label "function" :clhs "Body/f_logtes.htm")
      (gethash "logxor" *cl-reference-symbols*) '(:text "logxor" :label "function" :clhs "Body/f_logand.htm")
      (gethash "long-float" *cl-reference-symbols*) '(:text "long-float" :label "type-specifier" :clhs "Body/t_short_.htm")
      (gethash "long-float-epsilon" *cl-reference-symbols*) '(:text "long-float-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "long-float-negative-epsilon" *cl-reference-symbols*) '(:text "long-float-negative-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "long-site-name" *cl-reference-symbols*) '(:text "long-site-name" :label "function" :clhs "Body/f_short_.htm")
      (gethash "loop" *cl-reference-symbols*) '(:text "loop" :label "macro" :clhs "Body/m_loop.htm")
      (gethash "loop-finish" *cl-reference-symbols*) '(:text "loop-finish" :label "macro" :clhs "Body/m_loop_f.htm")
      (gethash "lower-case-p" *cl-reference-symbols*) '(:text "lower-case-p" :label "function" :clhs "Body/f_upper_.htm")
      (gethash "machine-instance" *cl-reference-symbols*) '(:text "machine-instance" :label "function" :clhs "Body/f_mach_i.htm")
      (gethash "machine-type" *cl-reference-symbols*) '(:text "machine-type" :label "function" :clhs "Body/f_mach_t.htm")
      (gethash "machine-version" *cl-reference-symbols*) '(:text "machine-version" :label "function" :clhs "Body/f_mach_v.htm")
      (gethash "macro-function" *cl-reference-symbols*) '(:text "macro-function" :label "function" :clhs "Body/f_macro_.htm")
      (gethash "macroexpand" *cl-reference-symbols*) '(:text "macroexpand" :label "function" :clhs "Body/f_mexp_.htm")
      (gethash "macroexpand-once" *cl-reference-symbols*) '(:text "macroexpand-1" :label "function" :clhs "Body/f_mexp_.htm")
      (gethash "macrolet" *cl-reference-symbols*) '(:text "macrolet" :label "special" :clhs "Body/s_flet_.htm")
      (gethash "make-array" *cl-reference-symbols*) '(:text "make-array" :label "function" :clhs "Body/f_mk_ar.htm")
      (gethash "make-broadcast-stream" *cl-reference-symbols*) '(:text "make-broadcast-stream" :label "function" :clhs "Body/f_mk_bro.htm")
      (gethash "make-concatenated-stream" *cl-reference-symbols*) '(:text "make-concatenated-stream" :label "function" :clhs "Body/f_mk_con.htm")
      (gethash "make-condition" *cl-reference-symbols*) '(:text "make-condition" :label "function" :clhs "Body/f_mk_cnd.htm")
      (gethash "make-dispatch-macro-character" *cl-reference-symbols*) '(:text "make-dispatch-macro-character" :label "function" :clhs "Body/f_mk_dis.htm")
      (gethash "make-echo-stream" *cl-reference-symbols*) '(:text "make-echo-stream" :label "function" :clhs "Body/f_mk_ech.htm")
      (gethash "make-hash-table" *cl-reference-symbols*) '(:text "make-hash-table" :label "function" :clhs "Body/f_mk_has.htm")
      (gethash "make-instance" *cl-reference-symbols*) '(:text "make-instance" :label "generic function" :clhs "Body/f_mk_ins.htm")
      (gethash "make-instances-obsolete" *cl-reference-symbols*) '(:text "make-instances-obsolete" :label "generic function" :clhs "Body/f_mk_i_1.htm")
      (gethash "make-list" *cl-reference-symbols*) '(:text "make-list" :label "function" :clhs "Body/f_mk_lis.htm")
      (gethash "make-load-form" *cl-reference-symbols*) '(:text "make-load-form" :label "generic function" :clhs "Body/f_mk_ld_.htm")
      (gethash "make-load-form-saving-slots" *cl-reference-symbols*) '(:text "make-load-form-saving-slots" :label "function" :clhs "Body/f_mk_l_1.htm")
      (gethash "make-method" *cl-reference-symbols*) '(:text "make-method" :label "function" :clhs "Body/m_call_m.htm")
      (gethash "make-package" *cl-reference-symbols*) '(:text "make-package" :label "function" :clhs "Body/f_mk_pkg.htm")
      (gethash "make-pathname" *cl-reference-symbols*) '(:text "make-pathname" :label "function" :clhs "Body/f_mk_pn.htm")
      (gethash "make-random-state" *cl-reference-symbols*) '(:text "make-random-state" :label "function" :clhs "Body/f_mk_rnd.htm")
      (gethash "make-sequence" *cl-reference-symbols*) '(:text "make-sequence" :label "function" :clhs "Body/f_mk_seq.htm")
      (gethash "make-string" *cl-reference-symbols*) '(:text "make-string" :label "function" :clhs "Body/f_mk_stg.htm")
      (gethash "make-string-input-stream" *cl-reference-symbols*) '(:text "make-string-input-stream" :label "function" :clhs "Body/f_mk_s_1.htm")
      (gethash "make-string-output-stream" *cl-reference-symbols*) '(:text "make-string-output-stream" :label "function" :clhs "Body/f_mk_s_2.htm")
      (gethash "make-symbol" *cl-reference-symbols*) '(:text "make-symbol" :label "function" :clhs "Body/f_mk_sym.htm")
      (gethash "make-synonym-stream" *cl-reference-symbols*) '(:text "make-synonym-stream" :label "function" :clhs "Body/f_mk_syn.htm")
      (gethash "make-two-way-stream" *cl-reference-symbols*) '(:text "make-two-way-stream" :label "function" :clhs "Body/f_mk_two.htm")
      (gethash "makunbound" *cl-reference-symbols*) '(:text "makunbound" :label "function" :clhs "Body/f_makunb.htm")
      (gethash "map" *cl-reference-symbols*) '(:text "map" :label "function" :clhs "Body/f_map.htm")
      (gethash "map-into" *cl-reference-symbols*) '(:text "map-into" :label "function" :clhs "Body/f_map_in.htm")
      (gethash "mapc" *cl-reference-symbols*) '(:text "mapc" :label "function" :clhs "Body/f_mapc_.htm")
      (gethash "mapcan" *cl-reference-symbols*) '(:text "mapcan" :label "function" :clhs "Body/f_mapc_.htm")
      (gethash "mapcar" *cl-reference-symbols*) '(:text "mapcar" :label "function" :clhs "Body/f_mapc_.htm")
      (gethash "mapcon" *cl-reference-symbols*) '(:text "mapcon" :label "function" :clhs "Body/f_mapc_.htm")
      (gethash "maphash" *cl-reference-symbols*) '(:text "maphash" :label "function" :clhs "Body/f_maphas.htm")
      (gethash "mapl" *cl-reference-symbols*) '(:text "mapl" :label "function" :clhs "Body/f_mapc_.htm")
      (gethash "maplist" *cl-reference-symbols*) '(:text "maplist" :label "function" :clhs "Body/f_mapc_.htm")
      (gethash "mask-field" *cl-reference-symbols*) '(:text "mask-field" :label "function" :clhs "Body/f_mask_f.htm")
      ;(gethash "method-combination-max" *cl-reference-symbols*) '(:text "max" :label "method-combination type" :clhs "Body/.htm")
      (gethash "max" *cl-reference-symbols*) '(:text "max" :label "function" :clhs "Body/f_max_m.htm")
      (gethash "maximize" *cl-reference-symbols*) '(:text "maximize" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "maximizing" *cl-reference-symbols*) '(:text "maximizing" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "member" *cl-reference-symbols*) '(:text "member" :label "function" :clhs "Body/a_member.htm")
      (gethash "member-if" *cl-reference-symbols*) '(:text "member-if" :label "function" :clhs "Body/f_mem_m.htm")
      (gethash "member-if-not" *cl-reference-symbols*) '(:text "member-if-not" :label "function" :clhs "Body/f_mem_m.htm")
      (gethash "merge" *cl-reference-symbols*) '(:text "merge" :label "function" :clhs "Body/f_merge.htm")
      (gethash "merge-pathnames" *cl-reference-symbols*) '(:text "merge-pathnames" :label "function" :clhs "Body/f_merge_.htm")
      (gethash "method" *cl-reference-symbols*) '(:text "method" :label "type-specifier" :clhs "Body/t_method.htm")
      (gethash "method-combination" *cl-reference-symbols*) '(:text "method-combination" :label "method-combination type" :clhs "Body/a_method.htm")
      (gethash "method-combination-error" *cl-reference-symbols*) '(:text "method-combination-error" :label "function" :clhs "Body/f_meth_1.htm")
      (gethash "method-qualifiers" *cl-reference-symbols*) '(:text "method-qualifiers" :label "generic function" :clhs "Body/f_method.htm")
      (gethash "function-min" *cl-reference-symbols*) '(:text "min" :label "function" :clhs "Body/f_max_m.htm")
      ;(gethash "method-combination-min" *cl-reference-symbols*) '(:text "min" :label "method-combination type" :clhs "Body/.htm")
      (gethash "minimize" *cl-reference-symbols*) '(:text "minimize" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "minimizing" *cl-reference-symbols*) '(:text "minimizing" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "minusp" *cl-reference-symbols*) '(:text "minusp" :label "function" :clhs "Body/f_minusp.htm")
      (gethash "mismatch" *cl-reference-symbols*) '(:text "mismatch" :label "function" :clhs "Body/f_mismat.htm")
      (gethash "mod" *cl-reference-symbols*) '(:text "mod" :label "function" :clhs "Body/a_mod.htm")
      (gethash "most-negative-double-float" *cl-reference-symbols*) '(:text "most-negative-double-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-negative-fixnum" *cl-reference-symbols*) '(:text "most-negative-fixnum" :label "constant" :clhs "Body/v_most_p.htm")
      (gethash "most-negative-long-float" *cl-reference-symbols*) '(:text "most-negative-long-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-negative-short-float" *cl-reference-symbols*) '(:text "most-negative-short-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-negative-single-float" *cl-reference-symbols*) '(:text "most-negative-single-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-positive-double-float" *cl-reference-symbols*) '(:text "most-positive-double-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-positive-fixnum" *cl-reference-symbols*) '(:text "most-positive-fixnum" :label "constant" :clhs "Body/v_most_p.htm")
      (gethash "most-positive-long-float" *cl-reference-symbols*) '(:text "most-positive-long-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-positive-short-float" *cl-reference-symbols*) '(:text "most-positive-short-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "most-positive-single-float" *cl-reference-symbols*) '(:text "most-positive-single-float" :label "constant" :clhs "Body/v_most_1.htm")
      (gethash "muffle-warning" *cl-reference-symbols*) '(:text "muffle-warning" :label "function" :clhs "Body/a_muffle.htm")
      (gethash "multiple-value-bind" *cl-reference-symbols*) '(:text "multiple-value-bind" :label "macro" :clhs "Body/m_multip.htm")
      (gethash "multiple-value-call" *cl-reference-symbols*) '(:text "multiple-value-call" :label "special" :clhs "Body/s_multip.htm")
      (gethash "multiple-value-list" *cl-reference-symbols*) '(:text "multiple-value-list" :label "macro" :clhs "Body/m_mult_1.htm")
      (gethash "multiple-value-prog1" *cl-reference-symbols*) '(:text "multiple-value-prog1" :label "special" :clhs "Body/s_mult_1.htm")
      (gethash "multiple-value-setq" *cl-reference-symbols*) '(:text "multiple-value-setq" :label "macro" :clhs "Body/m_mult_2.htm")
      (gethash "multiple-values-limit" *cl-reference-symbols*) '(:text "multiple-values-limit" :label "constant" :clhs "Body/v_multip.htm")
      (gethash "name-char" *cl-reference-symbols*) '(:text "name-char" :label "function" :clhs "Body/f_name_c.htm")
      (gethash "named" *cl-reference-symbols*) '(:text "named" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "namestring" *cl-reference-symbols*) '(:text "namestring" :label "function" :clhs "Body/f_namest.htm")
      (gethash "nbutlast" *cl-reference-symbols*) '(:text "nbutlast" :label "function" :clhs "Body/f_butlas.htm")
      (gethash "loop-keyword-nconc" *cl-reference-symbols*) '(:text "nconc" :label "loop-keyword" :clhs "Body/m_loop.htm")
      ;(gethash "method-combination-nconc" *cl-reference-symbols*) '(:text "nconc" :label "method-combination type" :clhs "Body/.htm")
      (gethash "nconc" *cl-reference-symbols*) '(:text "nconc" :label "function" :clhs "Body/f_nconc.htm")
      (gethash "nconcing" *cl-reference-symbols*) '(:text "nconcing" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "never" *cl-reference-symbols*) '(:text "never" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "next-method-p" *cl-reference-symbols*) '(:text "next-method-p" :label "function" :clhs "Body/f_next_m.htm")
      (gethash "nil" *cl-reference-symbols*) '(:text "nil" :label "constant" :clhs "Body/a_nil.htm")
      (gethash "nintersection" *cl-reference-symbols*) '(:text "nintersection" :label "function" :clhs "Body/f_isec_.htm")
      (gethash "ninth" *cl-reference-symbols*) '(:text "ninth" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "no-applicable-method" *cl-reference-symbols*) '(:text "no-applicable-method" :label "generic function" :clhs "Body/f_no_app.htm")
      (gethash "no-next-method" *cl-reference-symbols*) '(:text "no-next-method" :label "generic function" :clhs "Body/f_no_nex.htm")
      (gethash "not" *cl-reference-symbols*) '(:text "not" :label "function" :clhs "Body/a_not.htm")
      (gethash "notany" *cl-reference-symbols*) '(:text "notany" :label "function" :clhs "Body/f_everyc.htm")
      (gethash "notevery" *cl-reference-symbols*) '(:text "notevery" :label "function" :clhs "Body/f_everyc.htm")
      (gethash "notinline" *cl-reference-symbols*) '(:text "notinline" :label "declare expression" :clhs "Body/d_inline.htm")
      (gethash "nreconc" *cl-reference-symbols*) '(:text "nreconc" :label "function" :clhs "Body/f_revapp.htm")
      (gethash "nreverse" *cl-reference-symbols*) '(:text "nreverse" :label "function" :clhs "Body/f_revers.htm")
      (gethash "nset-difference" *cl-reference-symbols*) '(:text "nset-difference" :label "function" :clhs "Body/f_set_di.htm")
      (gethash "nset-exclusive-or" *cl-reference-symbols*) '(:text "nset-exclusive-or" :label "function" :clhs "Body/f_set_ex.htm")
      (gethash "nstring-capitalize" *cl-reference-symbols*) '(:text "nstring-capitalize" :label "function" :clhs "Body/f_stg_up.htm")
      (gethash "nstring-downcase" *cl-reference-symbols*) '(:text "nstring-downcase" :label "function" :clhs "Body/f_stg_up.htm")
      (gethash "nstring-upcase" *cl-reference-symbols*) '(:text "nstring-upcase" :label "function" :clhs "Body/f_stg_up.htm")
      (gethash "nsublis" *cl-reference-symbols*) '(:text "nsublis" :label "function" :clhs "Body/f_sublis.htm")
      (gethash "nsubst" *cl-reference-symbols*) '(:text "nsubst" :label "function" :clhs "Body/f_substc.htm")
      (gethash "nsubst-if" *cl-reference-symbols*) '(:text "nsubst-if" :label "function" :clhs "Body/f_substc.htm")
      (gethash "nsubst-if-not" *cl-reference-symbols*) '(:text "nsubst-if-not" :label "function" :clhs "Body/f_substc.htm")
      (gethash "nsubstitute" *cl-reference-symbols*) '(:text "nsubstitute" :label "function" :clhs "Body/f_sbs_s.htm")
      (gethash "nsubstitute-if" *cl-reference-symbols*) '(:text "nsubstitute-if" :label "function" :clhs "Body/f_sbs_s.htm")
      (gethash "nsubstitute-if-not" *cl-reference-symbols*) '(:text "nsubstitute-if-not" :label "function" :clhs "Body/f_sbs_s.htm")
      (gethash "nth" *cl-reference-symbols*) '(:text "nth" :label "function" :clhs "Body/f_nth.htm")
      (gethash "nth-value" *cl-reference-symbols*) '(:text "nth-value" :label "macro" :clhs "Body/m_nth_va.htm")
      (gethash "nthcdr" *cl-reference-symbols*) '(:text "nthcdr" :label "function" :clhs "Body/f_nthcdr.htm")
      (gethash "null" *cl-reference-symbols*) '(:text "null" :label "function" :clhs "Body/a_null.htm")
      (gethash "number" *cl-reference-symbols*) '(:text "number" :label "type-specifier" :clhs "Body/t_number.htm")
      (gethash "numberp" *cl-reference-symbols*) '(:text "numberp" :label "function" :clhs "Body/f_nump.htm")
      (gethash "numerator" *cl-reference-symbols*) '(:text "numerator" :label "function" :clhs "Body/f_numera.htm")
      (gethash "nunion" *cl-reference-symbols*) '(:text "nunion" :label "function" :clhs "Body/f_unionc.htm")
      (gethash "oddp" *cl-reference-symbols*) '(:text "oddp" :label "function" :clhs "Body/f_evenpc.htm")
      (gethash "of" *cl-reference-symbols*) '(:text "of" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "of-type" *cl-reference-symbols*) '(:text "of-type" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "on" *cl-reference-symbols*) '(:text "on" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "open" *cl-reference-symbols*) '(:text "open" :label "function" :clhs "Body/f_open.htm")
      (gethash "open-stream-p" *cl-reference-symbols*) '(:text "open-stream-p" :label "function" :clhs "Body/f_open_s.htm")
      (gethash "optimize" *cl-reference-symbols*) '(:text "optimize" :label "declare expression" :clhs "Body/d_optimi.htm")
      ;(gethash "method-combination-or" *cl-reference-symbols*) '(:text "or" :label "method-combination type" :clhs "Body/.htm")
      (gethash "or" *cl-reference-symbols*) '(:text "or" :label "macro" :clhs "Body/a_or.htm")
      (gethash "otherwise" *cl-reference-symbols*) '(:text "otherwise" :label "keyword" :clhs "Body/m_case_.htm")
      (gethash "output-stream-p" *cl-reference-symbols*) '(:text "output-stream-p" :label "function" :clhs "Body/f_in_stm.htm")
      (gethash "package" *cl-reference-symbols*) '(:text "package" :label "type-specifier" :clhs "Body/t_pkg.htm")
      (gethash "package-error" *cl-reference-symbols*) '(:text "package-error" :label "condition" :clhs "Body/e_pkg_er.htm")
      (gethash "package-error-package" *cl-reference-symbols*) '(:text "package-error-package" :label "function" :clhs "Body/f_pkg_er.htm")
      (gethash "package-name" *cl-reference-symbols*) '(:text "package-name" :label "function" :clhs "Body/f_pkg_na.htm")
      (gethash "package-nicknames" *cl-reference-symbols*) '(:text "package-nicknames" :label "function" :clhs "Body/f_pkg_ni.htm")
      (gethash "package-shadowing-symbols" *cl-reference-symbols*) '(:text "package-shadowing-symbols" :label "function" :clhs "Body/f_pkg_sh.htm")
      (gethash "package-use-list" *cl-reference-symbols*) '(:text "package-use-list" :label "function" :clhs "Body/f_pkg_us.htm")
      (gethash "package-used-by-list" *cl-reference-symbols*) '(:text "package-used-by-list" :label "function" :clhs "Body/f_pkg__1.htm")
      (gethash "packagep" *cl-reference-symbols*) '(:text "packagep" :label "function" :clhs "Body/f_pkgp.htm")
      (gethash "pairlis" *cl-reference-symbols*) '(:text "pairlis" :label "function" :clhs "Body/f_pairli.htm")
      (gethash "parse-error" *cl-reference-symbols*) '(:text "parse-error" :label "condition" :clhs "Body/e_parse_.htm")
      (gethash "parse-integer" *cl-reference-symbols*) '(:text "parse-integer" :label "function" :clhs "Body/f_parse_.htm")
      (gethash "parse-namestring" *cl-reference-symbols*) '(:text "parse-namestring" :label "function" :clhs "Body/f_pars_1.htm")
      (gethash "pathname" *cl-reference-symbols*) '(:text "pathname" :label "function" :clhs "Body/a_pn.htm")
      (gethash "pathname-device" *cl-reference-symbols*) '(:text "pathname-device" :label "function" :clhs "Body/f_pn_hos.htm")
      (gethash "pathname-directory" *cl-reference-symbols*) '(:text "pathname-directory" :label "function" :clhs "Body/f_pn_hos.htm")
      (gethash "pathname-host" *cl-reference-symbols*) '(:text "pathname-host" :label "function" :clhs "Body/f_pn_hos.htm")
      (gethash "pathname-match-p" *cl-reference-symbols*) '(:text "pathname-match-p" :label "function" :clhs "Body/f_pn_mat.htm")
      (gethash "pathname-name" *cl-reference-symbols*) '(:text "pathname-name" :label "function" :clhs "Body/f_pn_hos.htm")
      (gethash "pathname-type" *cl-reference-symbols*) '(:text "pathname-type" :label "function" :clhs "Body/f_pn_hos.htm")
      (gethash "pathname-version" *cl-reference-symbols*) '(:text "pathname-version" :label "function" :clhs "Body/f_pn_hos.htm")
      (gethash "pathnamep" *cl-reference-symbols*) '(:text "pathnamep" :label "function" :clhs "Body/f_pnp.htm")
      (gethash "peek-char" *cl-reference-symbols*) '(:text "peek-char" :label "function" :clhs "Body/f_peek_c.htm")
      (gethash "phase" *cl-reference-symbols*) '(:text "phase" :label "function" :clhs "Body/f_phase.htm")
      (gethash "pi" *cl-reference-symbols*) '(:text "pi" :label "constant" :clhs "Body/v_pi.htm")
      (gethash "plusp" *cl-reference-symbols*) '(:text "plusp" :label "function" :clhs "Body/f_minusp.htm")
      (gethash "pop" *cl-reference-symbols*) '(:text "pop" :label "macro" :clhs "Body/m_pop.htm")
      (gethash "position" *cl-reference-symbols*) '(:text "position" :label "function" :clhs "Body/f_pos_p.htm")
      (gethash "position-if" *cl-reference-symbols*) '(:text "position-if" :label "function" :clhs "Body/f_pos_p.htm")
      (gethash "position-if-not" *cl-reference-symbols*) '(:text "position-if-not" :label "function" :clhs "Body/f_pos_p.htm")
      (gethash "pprint" *cl-reference-symbols*) '(:text "pprint" :label "function" :clhs "Body/f_wr_pr.htm")
      (gethash "pprint-dispatch" *cl-reference-symbols*) '(:text "pprint-dispatch" :label "function" :clhs "Body/f_ppr_di.htm")
      (gethash "pprint-exit-if-list-exhausted" *cl-reference-symbols*) '(:text "pprint-exit-if-list-exhausted" :label "macro" :clhs "Body/m_ppr_ex.htm")
      (gethash "pprint-fill" *cl-reference-symbols*) '(:text "pprint-fill" :label "function" :clhs "Body/f_ppr_fi.htm")
      (gethash "pprint-indent" *cl-reference-symbols*) '(:text "pprint-indent" :label "function" :clhs "Body/f_ppr_in.htm")
      (gethash "pprint-linear" *cl-reference-symbols*) '(:text "pprint-linear" :label "function" :clhs "Body/f_ppr_fi.htm")
      (gethash "pprint-logical-block" *cl-reference-symbols*) '(:text "pprint-logical-block" :label "macro" :clhs "Body/m_ppr_lo.htm")
      (gethash "pprint-newline" *cl-reference-symbols*) '(:text "pprint-newline" :label "function" :clhs "Body/f_ppr_nl.htm")
      (gethash "pprint-pop" *cl-reference-symbols*) '(:text "pprint-pop" :label "macro" :clhs "Body/m_ppr_po.htm")
      (gethash "pprint-tab" *cl-reference-symbols*) '(:text "pprint-tab" :label "function" :clhs "Body/f_ppr_ta.htm")
      (gethash "pprint-tabular" *cl-reference-symbols*) '(:text "pprint-tabular" :label "function" :clhs "Body/f_ppr_fi.htm")
      (gethash "present-symbol" *cl-reference-symbols*) '(:text "present-symbol" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "present-symbols" *cl-reference-symbols*) '(:text "present-symbols" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "prin1" *cl-reference-symbols*) '(:text "prin1" :label "function" :clhs "Body/f_wr_pr.htm")
      (gethash "prin1-to-string" *cl-reference-symbols*) '(:text "prin1-to-string" :label "function" :clhs "Body/f_wr_to_.htm")
      (gethash "princ" *cl-reference-symbols*) '(:text "princ" :label "function" :clhs "Body/f_wr_pr.htm")
      (gethash "princ-to-string" *cl-reference-symbols*) '(:text "princ-to-string" :label "function" :clhs "Body/f_wr_to_.htm")
      (gethash "print" *cl-reference-symbols*) '(:text "print" :label "function" :clhs "Body/f_wr_pr.htm")
      (gethash "print-not-readable" *cl-reference-symbols*) '(:text "print-not-readable" :label "condition" :clhs "Body/e_pr_not.htm")
      (gethash "print-not-readable-object" *cl-reference-symbols*) '(:text "print-not-readable-object" :label "function" :clhs "Body/f_pr_not.htm")
      (gethash "print-object" *cl-reference-symbols*) '(:text "print-object" :label "generic function" :clhs "Body/f_pr_obj.htm")
      (gethash "print-unreadable-object" *cl-reference-symbols*) '(:text "print-unreadable-object" :label "macro" :clhs "Body/m_pr_unr.htm")
      (gethash "probe-file" *cl-reference-symbols*) '(:text "probe-file" :label "function" :clhs "Body/f_probe_.htm")
      (gethash "proclaim" *cl-reference-symbols*) '(:text "proclaim" :label "function" :clhs "Body/f_procla.htm")
      (gethash "prog" *cl-reference-symbols*) '(:text "prog" :label "macro" :clhs "Body/m_prog_.htm")
      (gethash "prog1" *cl-reference-symbols*) '(:text "prog1" :label "macro" :clhs "Body/m_prog1c.htm")
      (gethash "prog2" *cl-reference-symbols*) '(:text "prog2" :label "macro" :clhs "Body/m_prog1c.htm")
      (gethash "prog-asterix" *cl-reference-symbols*) '(:text "prog*" :label "macro" :clhs "Body/m_prog_.htm")
      ;(gethash "method-combination-progn" *cl-reference-symbols*) '(:text "progn" :label "method-combination type" :clhs "Body/.htm")
      (gethash "progn" *cl-reference-symbols*) '(:text "progn" :label "special" :clhs "Body/s_progn.htm")
      (gethash "program-error" *cl-reference-symbols*) '(:text "program-error" :label "condition" :clhs "Body/e_progra.htm")
      (gethash "progv" *cl-reference-symbols*) '(:text "progv" :label "special" :clhs "Body/s_progv.htm")
      (gethash "provide" *cl-reference-symbols*) '(:text "provide" :label "function" :clhs "Body/f_provid.htm")
      (gethash "psetf" *cl-reference-symbols*) '(:text "psetf" :label "macro" :clhs "Body/m_setf_.htm")
      (gethash "psetq" *cl-reference-symbols*) '(:text "psetq" :label "macro" :clhs "Body/m_psetq.htm")
      (gethash "push" *cl-reference-symbols*) '(:text "push" :label "macro" :clhs "Body/m_push.htm")
      (gethash "pushnew" *cl-reference-symbols*) '(:text "pushnew" :label "macro" :clhs "Body/m_pshnew.htm")
      (gethash "quote" *cl-reference-symbols*) '(:text "quote" :label "special" :clhs "Body/s_quote.htm")
      (gethash "random" *cl-reference-symbols*) '(:text "random" :label "function" :clhs "Body/f_random.htm")
      (gethash "random-state" *cl-reference-symbols*) '(:text "random-state" :label "type-specifier" :clhs "Body/t_rnd_st.htm")
      (gethash "random-state-p" *cl-reference-symbols*) '(:text "random-state-p" :label "function" :clhs "Body/f_rnd_st.htm")
      (gethash "rassoc" *cl-reference-symbols*) '(:text "rassoc" :label "function" :clhs "Body/f_rassoc.htm")
      (gethash "rassoc-if" *cl-reference-symbols*) '(:text "rassoc-if" :label "function" :clhs "Body/f_rassoc.htm")
      (gethash "rassoc-if-not" *cl-reference-symbols*) '(:text "rassoc-if-not" :label "function" :clhs "Body/f_rassoc.htm")
      (gethash "ratio" *cl-reference-symbols*) '(:text "ratio" :label "type-specifier" :clhs "Body/t_ratio.htm")
      (gethash "rational" *cl-reference-symbols*) '(:text "rational" :label "function" :clhs "Body/a_ration.htm")
      (gethash "rationalize" *cl-reference-symbols*) '(:text "rationalize" :label "function" :clhs "Body/f_ration.htm")
      (gethash "rationalp" *cl-reference-symbols*) '(:text "rationalp" :label "function" :clhs "Body/f_rati_1.htm")
      (gethash "read" *cl-reference-symbols*) '(:text "read" :label "function" :clhs "Body/f_rd_rd.htm")
      (gethash "read-byte" *cl-reference-symbols*) '(:text "read-byte" :label "function" :clhs "Body/f_rd_by.htm")
      (gethash "read-char" *cl-reference-symbols*) '(:text "read-char" :label "function" :clhs "Body/f_rd_cha.htm")
      (gethash "read-char-no-hang" *cl-reference-symbols*) '(:text "read-char-no-hang" :label "function" :clhs "Body/f_rd_c_1.htm")
      (gethash "read-delimited-list" *cl-reference-symbols*) '(:text "read-delimited-list" :label "function" :clhs "Body/f_rd_del.htm")
      (gethash "read-from-string" *cl-reference-symbols*) '(:text "read-from-string" :label "function" :clhs "Body/f_rd_fro.htm")
      (gethash "read-line" *cl-reference-symbols*) '(:text "read-line" :label "function" :clhs "Body/f_rd_lin.htm")
      (gethash "read-preserving-whitespace" *cl-reference-symbols*) '(:text "read-preserving-whitespace" :label "function" :clhs "Body/f_rd_rd.htm")
      (gethash "read-sequence" *cl-reference-symbols*) '(:text "read-sequence" :label "function" :clhs "Body/f_rd_seq.htm")
      (gethash "reader-error" *cl-reference-symbols*) '(:text "reader-error" :label "condition" :clhs "Body/e_rder_e.htm")
      (gethash "readtable" *cl-reference-symbols*) '(:text "readtable" :label "type-specifier" :clhs "Body/t_rdtabl.htm")
      (gethash "readtable-case" *cl-reference-symbols*) '(:text "readtable-case" :label "function" :clhs "Body/f_rdtabl.htm")
      (gethash "readtablep" *cl-reference-symbols*) '(:text "readtablep" :label "function" :clhs "Body/f_rdta_1.htm")
      (gethash "real" *cl-reference-symbols*) '(:text "real" :label "type-specifier" :clhs "Body/t_real.htm")
      (gethash "realp" *cl-reference-symbols*) '(:text "realp" :label "function" :clhs "Body/f_realp.htm")
      (gethash "realpart" *cl-reference-symbols*) '(:text "realpart" :label "function" :clhs "Body/f_realpa.htm")
      (gethash "reduce" *cl-reference-symbols*) '(:text "reduce" :label "function" :clhs "Body/f_reduce.htm")
      (gethash "reinitialize-instance" *cl-reference-symbols*) '(:text "reinitialize-instance" :label "generic function" :clhs "Body/f_reinit.htm")
      (gethash "rem" *cl-reference-symbols*) '(:text "rem" :label "function" :clhs "Body/f_mod_r.htm")
      (gethash "remf" *cl-reference-symbols*) '(:text "remf" :label "macro" :clhs "Body/m_remf.htm")
      (gethash "remhash" *cl-reference-symbols*) '(:text "remhash" :label "function" :clhs "Body/f_remhas.htm")
      (gethash "remove" *cl-reference-symbols*) '(:text "remove" :label "function" :clhs "Body/f_rm_rm.htm")
      (gethash "remove-duplicates" *cl-reference-symbols*) '(:text "remove-duplicates" :label "function" :clhs "Body/f_rm_dup.htm")
      (gethash "remove-if" *cl-reference-symbols*) '(:text "remove-if" :label "function" :clhs "Body/f_rm_rm.htm")
      (gethash "remove-if-not" *cl-reference-symbols*) '(:text "remove-if-not" :label "function" :clhs "Body/f_rm_rm.htm")
      (gethash "remove-method" *cl-reference-symbols*) '(:text "remove-method" :label "generic function" :clhs "Body/f_rm_met.htm")
      (gethash "remprop" *cl-reference-symbols*) '(:text "remprop" :label "function" :clhs "Body/f_rempro.htm")
      (gethash "rename-file" *cl-reference-symbols*) '(:text "rename-file" :label "function" :clhs "Body/f_rn_fil.htm")
      (gethash "rename-package" *cl-reference-symbols*) '(:text "rename-package" :label "function" :clhs "Body/f_rn_pkg.htm")
      (gethash "repeat" *cl-reference-symbols*) '(:text "repeat" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "replace" *cl-reference-symbols*) '(:text "replace" :label "function" :clhs "Body/f_replac.htm")
      (gethash "require" *cl-reference-symbols*) '(:text "require" :label "function" :clhs "Body/f_provid.htm")
      (gethash "rest" *cl-reference-symbols*) '(:text "rest" :label "function" :clhs "Body/f_rest.htm")
      (gethash "restart" *cl-reference-symbols*) '(:text "restart" :label "type-specifier" :clhs "Body/t_rst.htm")
      (gethash "restart-bind" *cl-reference-symbols*) '(:text "restart-bind" :label "macro" :clhs "Body/m_rst_bi.htm")
      (gethash "restart-case" *cl-reference-symbols*) '(:text "restart-case" :label "macro" :clhs "Body/m_rst_ca.htm")
      (gethash "restart-name" *cl-reference-symbols*) '(:text "restart-name" :label "function" :clhs "Body/f_rst_na.htm")
      (gethash "loop-keyword-return" *cl-reference-symbols*) '(:text "return" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "return" *cl-reference-symbols*) '(:text "return" :label "macro" :clhs "Body/m_return.htm")
      (gethash "return-from" *cl-reference-symbols*) '(:text "return-from" :label "special" :clhs "Body/s_ret_fr.htm")
      (gethash "revappend" *cl-reference-symbols*) '(:text "revappend" :label "function" :clhs "Body/f_revapp.htm")
      (gethash "reverse" *cl-reference-symbols*) '(:text "reverse" :label "function" :clhs "Body/f_revers.htm")
      (gethash "room" *cl-reference-symbols*) '(:text "room" :label "function" :clhs "Body/f_room.htm")
      (gethash "rotatef" *cl-reference-symbols*) '(:text "rotatef" :label "macro" :clhs "Body/m_rotate.htm")
      (gethash "round" *cl-reference-symbols*) '(:text "round" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "row-major-aref" *cl-reference-symbols*) '(:text "row-major-aref" :label "function" :clhs "Body/f_row_ma.htm")
      (gethash "rplaca" *cl-reference-symbols*) '(:text "rplaca" :label "function" :clhs "Body/f_rplaca.htm")
      (gethash "rplacd" *cl-reference-symbols*) '(:text "rplacd" :label "function" :clhs "Body/f_rplaca.htm")
      (gethash "safety" *cl-reference-symbols*) '(:text "safety" :label "declare expression" :clhs "Body/d_optimi.htm")
      (gethash "satisfies" *cl-reference-symbols*) '(:text "satisfies" :label "type-specifier" :clhs "Body/t_satisf.htm")
      (gethash "sbit" *cl-reference-symbols*) '(:text "sbit" :label "function" :clhs "Body/f_bt_sb.htm")
      (gethash "scale-float" *cl-reference-symbols*) '(:text "scale-float" :label "function" :clhs "Body/f_dec_fl.htm")
      (gethash "schar" *cl-reference-symbols*) '(:text "schar" :label "function" :clhs "Body/f_char_.htm")
      (gethash "search" *cl-reference-symbols*) '(:text "search" :label "function" :clhs "Body/f_search.htm")
      (gethash "second" *cl-reference-symbols*) '(:text "second" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "sequence" *cl-reference-symbols*) '(:text "sequence" :label "type-specifier" :clhs "Body/t_seq.htm")
      (gethash "serious-condition" *cl-reference-symbols*) '(:text "serious-condition" :label "condition" :clhs "Body/e_seriou.htm")
      (gethash "set" *cl-reference-symbols*) '(:text "set" :label "function" :clhs "Body/f_set.htm")
      (gethash "set-difference" *cl-reference-symbols*) '(:text "set-difference" :label "function" :clhs "Body/f_set_di.htm")
      (gethash "set-dispatch-macro-character" *cl-reference-symbols*) '(:text "set-dispatch-macro-character" :label "function" :clhs "Body/f_set__1.htm")
      (gethash "set-exclusive-or" *cl-reference-symbols*) '(:text "set-exclusive-or" :label "function" :clhs "Body/f_set_ex.htm")
      (gethash "set-macro-character" *cl-reference-symbols*) '(:text "set-macro-character" :label "function" :clhs "Body/f_set_ma.htm")
      (gethash "set-pprint-dispatch" *cl-reference-symbols*) '(:text "set-pprint-dispatch" :label "function" :clhs "Body/f_set_pp.htm")
      (gethash "set-syntax-from-char" *cl-reference-symbols*) '(:text "set-syntax-from-char" :label "function" :clhs "Body/f_set_sy.htm")
      (gethash "setf" *cl-reference-symbols*) '(:text "setf" :label "macro" :clhs "Body/a_setf.htm")
      (gethash "setq" *cl-reference-symbols*) '(:text "setq" :label "special" :clhs "Body/s_setq.htm")
      (gethash "seventh" *cl-reference-symbols*) '(:text "seventh" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "shadow" *cl-reference-symbols*) '(:text "shadow" :label "function" :clhs "Body/f_shadow.htm")
      (gethash "shadowing-import" *cl-reference-symbols*) '(:text "shadowing-import" :label "function" :clhs "Body/f_shdw_i.htm")
      (gethash "shared-initialize" *cl-reference-symbols*) '(:text "shared-initialize" :label "generic function" :clhs "Body/f_shared.htm")
      (gethash "shiftf" *cl-reference-symbols*) '(:text "shiftf" :label "macro" :clhs "Body/m_shiftf.htm")
      (gethash "short-float" *cl-reference-symbols*) '(:text "short-float" :label "type-specifier" :clhs "Body/t_short_.htm")
      (gethash "short-float-epsilon" *cl-reference-symbols*) '(:text "short-float-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "short-float-negative-epsilon" *cl-reference-symbols*) '(:text "short-float-negative-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "short-site-name" *cl-reference-symbols*) '(:text "short-site-name" :label "function" :clhs "Body/f_short_.htm")
      (gethash "signal" *cl-reference-symbols*) '(:text "signal" :label "function" :clhs "Body/f_signal.htm")
      (gethash "signed-byte" *cl-reference-symbols*) '(:text "signed-byte" :label "type-specifier" :clhs "Body/t_sgn_by.htm")
      (gethash "signum" *cl-reference-symbols*) '(:text "signum" :label "function" :clhs "Body/f_signum.htm")
      (gethash "simple-array" *cl-reference-symbols*) '(:text "simple-array" :label "type-specifier" :clhs "Body/t_smp_ar.htm")
      (gethash "simple-base-string" *cl-reference-symbols*) '(:text "simple-base-string" :label "type-specifier" :clhs "Body/t_smp_ba.htm")
      (gethash "simple-bit-vector" *cl-reference-symbols*) '(:text "simple-bit-vector" :label "type-specifier" :clhs "Body/t_smp_bt.htm")
      (gethash "simple-bit-vector-p" *cl-reference-symbols*) '(:text "simple-bit-vector-p" :label "function" :clhs "Body/f_smp_bt.htm")
      (gethash "simple-condition" *cl-reference-symbols*) '(:text "simple-condition" :label "condition" :clhs "Body/e_smp_cn.htm")
      (gethash "simple-condition-format-arguments" *cl-reference-symbols*) '(:text "simple-condition-format-arguments" :label "function" :clhs "Body/f_smp_cn.htm")
      (gethash "simple-condition-format-control" *cl-reference-symbols*) '(:text "simple-condition-format-control" :label "function" :clhs "Body/f_smp_cn.htm")
      (gethash "simple-error" *cl-reference-symbols*) '(:text "simple-error" :label "condition" :clhs "Body/e_smp_er.htm")
      (gethash "simple-string" *cl-reference-symbols*) '(:text "simple-string" :label "type-specifier" :clhs "Body/t_smp_st.htm")
      (gethash "simple-string-p" *cl-reference-symbols*) '(:text "simple-string-p" :label "function" :clhs "Body/f_smp_st.htm")
      (gethash "simple-type-error" *cl-reference-symbols*) '(:text "simple-type-error" :label "condition" :clhs "Body/e_smp_tp.htm")
      (gethash "simple-vector" *cl-reference-symbols*) '(:text "simple-vector" :label "type-specifier" :clhs "Body/t_smp_ve.htm")
      (gethash "simple-vector-p" *cl-reference-symbols*) '(:text "simple-vector-p" :label "function" :clhs "Body/f_smp_ve.htm")
      (gethash "simple-warning" *cl-reference-symbols*) '(:text "simple-warning" :label "condition" :clhs "Body/e_smp_wa.htm")
      (gethash "sin" *cl-reference-symbols*) '(:text "sin" :label "function" :clhs "Body/f_sin_c.htm")
      (gethash "single-float" *cl-reference-symbols*) '(:text "single-float" :label "type-specifier" :clhs "Body/t_short_.htm")
      (gethash "single-float-epsilon" *cl-reference-symbols*) '(:text "single-float-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "single-float-negative-epsilon" *cl-reference-symbols*) '(:text "single-float-negative-epsilon" :label "constant" :clhs "Body/v_short_.htm")
      (gethash "sinh" *cl-reference-symbols*) '(:text "sinh" :label "function" :clhs "Body/f_sinh_.htm")
      (gethash "sixth" *cl-reference-symbols*) '(:text "sixth" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "sleep" *cl-reference-symbols*) '(:text "sleep" :label "function" :clhs "Body/f_sleep.htm")
      (gethash "slot-boundp" *cl-reference-symbols*) '(:text "slot-boundp" :label "function" :clhs "Body/f_slt_bo.htm")
      (gethash "slot-exists-p" *cl-reference-symbols*) '(:text "slot-exists-p" :label "function" :clhs "Body/f_slt_ex.htm")
      (gethash "slot-makunbound" *cl-reference-symbols*) '(:text "slot-makunbound" :label "function" :clhs "Body/f_slt_ma.htm")
      (gethash "slot-missing" *cl-reference-symbols*) '(:text "slot-missing" :label "generic function" :clhs "Body/f_slt_mi.htm")
      (gethash "slot-unbound" *cl-reference-symbols*) '(:text "slot-unbound" :label "generic function" :clhs "Body/f_slt_un.htm")
      (gethash "slot-value" *cl-reference-symbols*) '(:text "slot-value" :label "function" :clhs "Body/f_slt_va.htm")
      (gethash "software-type" *cl-reference-symbols*) '(:text "software-type" :label "function" :clhs "Body/f_sw_tpc.htm")
      (gethash "software-version" *cl-reference-symbols*) '(:text "software-version" :label "function" :clhs "Body/f_sw_tpc.htm")
      (gethash "some" *cl-reference-symbols*) '(:text "some" :label "function" :clhs "Body/f_everyc.htm")
      (gethash "sort" *cl-reference-symbols*) '(:text "sort" :label "function" :clhs "Body/f_sort_.htm")
      (gethash "space" *cl-reference-symbols*) '(:text "space" :label "declare expression" :clhs "Body/d_optimi.htm")
      (gethash "special" *cl-reference-symbols*) '(:text "special" :label "declare expression" :clhs "Body/d_specia.htm")
      (gethash "special-operator-p" *cl-reference-symbols*) '(:text "special-operator-p" :label "function" :clhs "Body/f_specia.htm")
      (gethash "speed" *cl-reference-symbols*) '(:text "speed" :label "declare expression" :clhs "Body/d_optimi.htm")
      (gethash "sqrt" *cl-reference-symbols*) '(:text "sqrt" :label "function" :clhs "Body/f_sqrt_.htm")
      (gethash "stable-sort" *cl-reference-symbols*) '(:text "stable-sort" :label "function" :clhs "Body/f_sort_.htm")
      (gethash "standard" *cl-reference-symbols*) '(:text "standard" :label "method-combination type" :clhs "Body/07_ffb.htm")
      (gethash "standard-char" *cl-reference-symbols*) '(:text "standard-char" :label "type-specifier" :clhs "Body/t_std_ch.htm")
      (gethash "standard-char-p" *cl-reference-symbols*) '(:text "standard-char-p" :label "function" :clhs "Body/f_std_ch.htm")
      (gethash "standard-class" *cl-reference-symbols*) '(:text "standard-class" :label "type-specifier" :clhs "Body/t_std_cl.htm")
      (gethash "standard-generic-function" *cl-reference-symbols*) '(:text "standard-generic-function" :label "type-specifier" :clhs "Body/t_std_ge.htm")
      (gethash "standard-method" *cl-reference-symbols*) '(:text "standard-method" :label "type-specifier" :clhs "Body/t_std_me.htm")
      (gethash "standard-object" *cl-reference-symbols*) '(:text "standard-object" :label "type-specifier" :clhs "Body/t_std_ob.htm")
      (gethash "step" *cl-reference-symbols*) '(:text "step" :label "macro" :clhs "Body/m_step.htm")
      (gethash "storage-condition" *cl-reference-symbols*) '(:text "storage-condition" :label "condition" :clhs "Body/e_storag.htm")
      (gethash "store-value" *cl-reference-symbols*) '(:text "store-value" :label "function" :clhs "Body/a_store_.htm")
      (gethash "stream" *cl-reference-symbols*) '(:text "stream" :label "type-specifier" :clhs "Body/t_stream.htm")
      (gethash "stream-element-type" *cl-reference-symbols*) '(:text "stream-element-type" :label "function" :clhs "Body/f_stm_el.htm")
      (gethash "stream-error" *cl-reference-symbols*) '(:text "stream-error" :label "condition" :clhs "Body/e_stm_er.htm")
      (gethash "stream-error-stream" *cl-reference-symbols*) '(:text "stream-error-stream" :label "function" :clhs "Body/f_stm_er.htm")
      (gethash "stream-external-format" *cl-reference-symbols*) '(:text "stream-external-format" :label "function" :clhs "Body/f_stm_ex.htm")
      (gethash "streamp" *cl-reference-symbols*) '(:text "streamp" :label "function" :clhs "Body/f_stmp.htm")
      (gethash "string" *cl-reference-symbols*) '(:text "string" :label "function" :clhs "Body/a_string.htm")
      (gethash "string-capitalize" *cl-reference-symbols*) '(:text "string-capitalize" :label "function" :clhs "Body/f_stg_up.htm")
      (gethash "string-downcase" *cl-reference-symbols*) '(:text "string-downcase" :label "function" :clhs "Body/f_stg_up.htm")
      (gethash "string-equal" *cl-reference-symbols*) '(:text "string-equal" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-greaterp" *cl-reference-symbols*) '(:text "string-greaterp" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-left-trim" *cl-reference-symbols*) '(:text "string-left-trim" :label "function" :clhs "Body/f_stg_tr.htm")
      (gethash "string-lessp" *cl-reference-symbols*) '(:text "string-lessp" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-not-equal" *cl-reference-symbols*) '(:text "string-not-equal" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-not-greaterp" *cl-reference-symbols*) '(:text "string-not-greaterp" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-not-lessp" *cl-reference-symbols*) '(:text "string-not-lessp" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-right-trim" *cl-reference-symbols*) '(:text "string-right-trim" :label "function" :clhs "Body/f_stg_tr.htm")
      (gethash "string-stream" *cl-reference-symbols*) '(:text "string-stream" :label "type-specifier" :clhs "Body/t_stg_st.htm")
      (gethash "string-trim" *cl-reference-symbols*) '(:text "string-trim" :label "function" :clhs "Body/f_stg_tr.htm")
      (gethash "string-upcase" *cl-reference-symbols*) '(:text "string-upcase" :label "function" :clhs "Body/f_stg_up.htm")
      (gethash "string-literal-not-equal" *cl-reference-symbols*) '(:text "string/=" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-literal-lt" *cl-reference-symbols*) '(:text "string<" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-literal-lt-equal" *cl-reference-symbols*) '(:text "string<=" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-literal-equal" *cl-reference-symbols*) '(:text "string=" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-literal-gt" *cl-reference-symbols*) '(:text "string>" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "string-literal-gt-equal" *cl-reference-symbols*) '(:text "string>=" :label "function" :clhs "Body/f_stgeq_.htm")
      (gethash "stringp" *cl-reference-symbols*) '(:text "stringp" :label "function" :clhs "Body/f_stgp.htm")
      (gethash "structure" *cl-reference-symbols*) '(:text "structure" :label "type-specifier" :clhs "Body/f_docume.htm")
      (gethash "structure-class" *cl-reference-symbols*) '(:text "structure-class" :label "type-specifier" :clhs "Body/t_stu_cl.htm")
      (gethash "structure-object" *cl-reference-symbols*) '(:text "structure-object" :label "type-specifier" :clhs "Body/t_stu_ob.htm")
      (gethash "style-warning" *cl-reference-symbols*) '(:text "style-warning" :label "condition" :clhs "Body/e_style_.htm")
      (gethash "sublis" *cl-reference-symbols*) '(:text "sublis" :label "function" :clhs "Body/f_sublis.htm")
      (gethash "subseq" *cl-reference-symbols*) '(:text "subseq" :label "function" :clhs "Body/f_subseq.htm")
      (gethash "subsetp" *cl-reference-symbols*) '(:text "subsetp" :label "function" :clhs "Body/f_subset.htm")
      (gethash "subst" *cl-reference-symbols*) '(:text "subst" :label "function" :clhs "Body/f_substc.htm")
      (gethash "subst-if" *cl-reference-symbols*) '(:text "subst-if" :label "function" :clhs "Body/f_substc.htm")
      (gethash "subst-if-not" *cl-reference-symbols*) '(:text "subst-if-not" :label "function" :clhs "Body/f_substc.htm")
      (gethash "substitute" *cl-reference-symbols*) '(:text "substitute" :label "function" :clhs "Body/f_sbs_s.htm")
      (gethash "substitute-if" *cl-reference-symbols*) '(:text "substitute-if" :label "function" :clhs "Body/f_sbs_s.htm")
      (gethash "substitute-if-not" *cl-reference-symbols*) '(:text "substitute-if-not" :label "function" :clhs "Body/f_sbs_s.htm")
      (gethash "subtypep" *cl-reference-symbols*) '(:text "subtypep" :label "function" :clhs "Body/f_subtpp.htm")
      (gethash "sum" *cl-reference-symbols*) '(:text "sum" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "summing" *cl-reference-symbols*) '(:text "summing" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "svref" *cl-reference-symbols*) '(:text "svref" :label "function" :clhs "Body/f_svref.htm")
      (gethash "sxhash" *cl-reference-symbols*) '(:text "sxhash" :label "function" :clhs "Body/f_sxhash.htm")
      (gethash "loop-keyword-symbol" *cl-reference-symbols*) '(:text "symbol" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "symbol" *cl-reference-symbols*) '(:text "symbol" :label "type-specifier" :clhs "Body/t_symbol.htm")
      (gethash "symbol-function" *cl-reference-symbols*) '(:text "symbol-function" :label "function" :clhs "Body/f_symb_1.htm")
      (gethash "symbol-macrolet" *cl-reference-symbols*) '(:text "symbol-macrolet" :label "special" :clhs "Body/s_symbol.htm")
      (gethash "symbol-name" *cl-reference-symbols*) '(:text "symbol-name" :label "function" :clhs "Body/f_symb_2.htm")
      (gethash "symbol-package" *cl-reference-symbols*) '(:text "symbol-package" :label "function" :clhs "Body/f_symb_3.htm")
      (gethash "symbol-plist" *cl-reference-symbols*) '(:text "symbol-plist" :label "function" :clhs "Body/f_symb_4.htm")
      (gethash "symbol-value" *cl-reference-symbols*) '(:text "symbol-value" :label "function" :clhs "Body/f_symb_5.htm")
      (gethash "symbolp" *cl-reference-symbols*) '(:text "symbolp" :label "function" :clhs "Body/f_symbol.htm")
      (gethash "symbols" *cl-reference-symbols*) '(:text "symbols" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "synonym-stream" *cl-reference-symbols*) '(:text "synonym-stream" :label "type-specifier" :clhs "Body/t_syn_st.htm")
      (gethash "synonym-stream-symbol" *cl-reference-symbols*) '(:text "synonym-stream-symbol" :label "function" :clhs "Body/f_syn_st.htm")
      (gethash "literal-t" *cl-reference-symbols*) '(:text "t" :label "constant" :clhs "Body/a_t.htm")
      (gethash "tagbody" *cl-reference-symbols*) '(:text "tagbody" :label "special" :clhs "Body/s_tagbod.htm")
      (gethash "tailp" *cl-reference-symbols*) '(:text "tailp" :label "function" :clhs "Body/f_ldiffc.htm")
      (gethash "tan" *cl-reference-symbols*) '(:text "tan" :label "function" :clhs "Body/f_sin_c.htm")
      (gethash "tanh" *cl-reference-symbols*) '(:text "tanh" :label "function" :clhs "Body/f_sinh_.htm")
      (gethash "tenth" *cl-reference-symbols*) '(:text "tenth" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "terpri" *cl-reference-symbols*) '(:text "terpri" :label "function" :clhs "Body/f_terpri.htm")
      (gethash "loop-keyword-the" *cl-reference-symbols*) '(:text "the" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "the" *cl-reference-symbols*) '(:text "the" :label "special" :clhs "Body/s_the.htm")
      (gethash "then" *cl-reference-symbols*) '(:text "then" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "thereis" *cl-reference-symbols*) '(:text "thereis" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "third" *cl-reference-symbols*) '(:text "third" :label "function" :clhs "Body/f_firstc.htm")
      (gethash "throw" *cl-reference-symbols*) '(:text "throw" :label "special" :clhs "Body/s_throw.htm")
      (gethash "time" *cl-reference-symbols*) '(:text "time" :label "macro" :clhs "Body/m_time.htm")
      (gethash "to" *cl-reference-symbols*) '(:text "to" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "trace" *cl-reference-symbols*) '(:text "trace" :label "macro" :clhs "Body/m_tracec.htm")
      (gethash "translate-logical-pathname" *cl-reference-symbols*) '(:text "translate-logical-pathname" :label "function" :clhs "Body/f_tr_log.htm")
      (gethash "translate-pathname" *cl-reference-symbols*) '(:text "translate-pathname" :label "function" :clhs "Body/f_tr_pn.htm")
      (gethash "tree-equal" *cl-reference-symbols*) '(:text "tree-equal" :label "function" :clhs "Body/f_tree_e.htm")
      (gethash "truename" *cl-reference-symbols*) '(:text "truename" :label "function" :clhs "Body/f_tn.htm")
      (gethash "truncate" *cl-reference-symbols*) '(:text "truncate" :label "function" :clhs "Body/f_floorc.htm")
      (gethash "two-way-stream" *cl-reference-symbols*) '(:text "two-way-stream" :label "type-specifier" :clhs "Body/t_two_wa.htm")
      (gethash "two-way-stream-input-stream" *cl-reference-symbols*) '(:text "two-way-stream-input-stream" :label "function" :clhs "Body/f_two_wa.htm")
      (gethash "two-way-stream-output-stream" *cl-reference-symbols*) '(:text "two-way-stream-output-stream" :label "function" :clhs "Body/f_two_wa.htm")
      (gethash "type" *cl-reference-symbols*) '(:text "type" :label "declare expression" :clhs "Body/a_type.htm")
      (gethash "type-error" *cl-reference-symbols*) '(:text "type-error" :label "condition" :clhs "Body/e_tp_err.htm")
      (gethash "type-error-datum" *cl-reference-symbols*) '(:text "type-error-datum" :label "function" :clhs "Body/f_tp_err.htm")
      (gethash "type-error-expected-type" *cl-reference-symbols*) '(:text "type-error-expected-type" :label "function" :clhs "Body/f_tp_err.htm")
      (gethash "type-of" *cl-reference-symbols*) '(:text "type-of" :label "function" :clhs "Body/f_tp_of.htm")
      (gethash "typecase" *cl-reference-symbols*) '(:text "typecase" :label "macro" :clhs "Body/m_tpcase.htm")
      (gethash "typep" *cl-reference-symbols*) '(:text "typep" :label "function" :clhs "Body/f_typep.htm")
      (gethash "unbound-slot" *cl-reference-symbols*) '(:text "unbound-slot" :label "condition" :clhs "Body/e_unboun.htm")
      (gethash "unbound-slot-instance" *cl-reference-symbols*) '(:text "unbound-slot-instance" :label "function" :clhs "Body/f_unboun.htm")
      (gethash "unbound-variable" *cl-reference-symbols*) '(:text "unbound-variable" :label "condition" :clhs "Body/e_unbo_1.htm")
      (gethash "undefined-function" *cl-reference-symbols*) '(:text "undefined-function" :label "condition" :clhs "Body/e_undefi.htm")
      (gethash "unexport" *cl-reference-symbols*) '(:text "unexport" :label "function" :clhs "Body/f_unexpo.htm")
      (gethash "unintern" *cl-reference-symbols*) '(:text "unintern" :label "function" :clhs "Body/f_uninte.htm")
      (gethash "union" *cl-reference-symbols*) '(:text "union" :label "function" :clhs "Body/f_unionc.htm")
      (gethash "loop-keyword-unless" *cl-reference-symbols*) '(:text "unless" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "unless" *cl-reference-symbols*) '(:text "unless" :label "macro" :clhs "Body/m_when_.htm")
      (gethash "unread-char" *cl-reference-symbols*) '(:text "unread-char" :label "function" :clhs "Body/f_unrd_c.htm")
      (gethash "unsigned-byte" *cl-reference-symbols*) '(:text "unsigned-byte" :label "type-specifier" :clhs "Body/t_unsgn_.htm")
      (gethash "until" *cl-reference-symbols*) '(:text "until" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "untrace" *cl-reference-symbols*) '(:text "untrace" :label "macro" :clhs "Body/m_tracec.htm")
      (gethash "unuse-package" *cl-reference-symbols*) '(:text "unuse-package" :label "function" :clhs "Body/f_unuse_.htm")
      (gethash "unwind-protect" *cl-reference-symbols*) '(:text "unwind-protect" :label "special" :clhs "Body/s_unwind.htm")
      (gethash "update-instance-for-different-class" *cl-reference-symbols*) '(:text "update-instance-for-different-class" :label "generic function" :clhs "Body/f_update.htm")
      (gethash "update-instance-for-redefined-class" *cl-reference-symbols*) '(:text "update-instance-for-redefined-class" :label "generic function" :clhs "Body/f_upda_1.htm")
      (gethash "upfrom" *cl-reference-symbols*) '(:text "upfrom" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "upgraded-array-element-type" *cl-reference-symbols*) '(:text "upgraded-array-element-type" :label "function" :clhs "Body/f_upgr_1.htm")
      (gethash "upgraded-complex-part-type" *cl-reference-symbols*) '(:text "upgraded-complex-part-type" :label "function" :clhs "Body/f_upgrad.htm")
      (gethash "upper-case-p" *cl-reference-symbols*) '(:text "upper-case-p" :label "function" :clhs "Body/f_upper_.htm")
      (gethash "upto" *cl-reference-symbols*) '(:text "upto" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "use-package" *cl-reference-symbols*) '(:text "use-package" :label "function" :clhs "Body/f_use_pk.htm")
      (gethash "use-value" *cl-reference-symbols*) '(:text "use-value" :label "function" :clhs "Body/a_use_va.htm")
      (gethash "user-homedir-pathname" *cl-reference-symbols*) '(:text "user-homedir-pathname" :label "function" :clhs "Body/f_user_h.htm")
      (gethash "using" *cl-reference-symbols*) '(:text "using" :label "loop-keyword" :clhs "Body/m_loop.htm")
      ;(gethash "literal-v" *cl-reference-symbols*) '(:text "v" :label "format control parameter" :clhs "Body/.htm")
      (gethash "values" *cl-reference-symbols*) '(:text "values" :label "function" :clhs "Body/a_values.htm")
      (gethash "values-list" *cl-reference-symbols*) '(:text "values-list" :label "function" :clhs "Body/f_vals_l.htm")
      (gethash "variable" *cl-reference-symbols*) '(:text "variable" :label "type-specifier" :clhs "Body/f_docume.htm")
      (gethash "vector" *cl-reference-symbols*) '(:text "vector" :label "function" :clhs "Body/a_vector.htm")
      (gethash "vector-pop" *cl-reference-symbols*) '(:text "vector-pop" :label "function" :clhs "Body/f_vec_po.htm")
      (gethash "vector-push" *cl-reference-symbols*) '(:text "vector-push" :label "function" :clhs "Body/f_vec_ps.htm")
      (gethash "vector-push-extend" *cl-reference-symbols*) '(:text "vector-push-extend" :label "function" :clhs "Body/f_vec_ps.htm")
      (gethash "vectorp" *cl-reference-symbols*) '(:text "vectorp" :label "function" :clhs "Body/f_vecp.htm")
      (gethash "warn" *cl-reference-symbols*) '(:text "warn" :label "function" :clhs "Body/f_warn.htm")
      (gethash "warning" *cl-reference-symbols*) '(:text "warning" :label "condition" :clhs "Body/e_warnin.htm")
      (gethash "loop-keyword-when" *cl-reference-symbols*) '(:text "when" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "when" *cl-reference-symbols*) '(:text "when" :label "macro" :clhs "Body/m_when_.htm")
      (gethash "while" *cl-reference-symbols*) '(:text "while" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "wild-pathname-p" *cl-reference-symbols*) '(:text "wild-pathname-p" :label "function" :clhs "Body/f_wild_p.htm")
      (gethash "with" *cl-reference-symbols*) '(:text "with" :label "loop-keyword" :clhs "Body/m_loop.htm")
      (gethash "with-accessors" *cl-reference-symbols*) '(:text "with-accessors" :label "macro" :clhs "Body/m_w_acce.htm")
      (gethash "with-compilation-unit" *cl-reference-symbols*) '(:text "with-compilation-unit" :label "macro" :clhs "Body/m_w_comp.htm")
      (gethash "with-condition-restarts" *cl-reference-symbols*) '(:text "with-condition-restarts" :label "macro" :clhs "Body/m_w_cnd_.htm")
      (gethash "with-hash-table-iterator" *cl-reference-symbols*) '(:text "with-hash-table-iterator" :label "macro" :clhs "Body/m_w_hash.htm")
      (gethash "with-input-from-string" *cl-reference-symbols*) '(:text "with-input-from-string" :label "macro" :clhs "Body/m_w_in_f.htm")
      (gethash "with-open-file" *cl-reference-symbols*) '(:text "with-open-file" :label "macro" :clhs "Body/m_w_open.htm")
      (gethash "with-open-stream" *cl-reference-symbols*) '(:text "with-open-stream" :label "macro" :clhs "Body/m_w_op_1.htm")
      (gethash "with-output-to-string" *cl-reference-symbols*) '(:text "with-output-to-string" :label "macro" :clhs "Body/m_w_out_.htm")
      (gethash "with-package-iterator" *cl-reference-symbols*) '(:text "with-package-iterator" :label "macro" :clhs "Body/m_w_pkg_.htm")
      (gethash "with-simple-restart" *cl-reference-symbols*) '(:text "with-simple-restart" :label "macro" :clhs "Body/m_w_smp_.htm")
      (gethash "with-slots" *cl-reference-symbols*) '(:text "with-slots" :label "macro" :clhs "Body/m_w_slts.htm")
      (gethash "with-standard-io-syntax" *cl-reference-symbols*) '(:text "with-standard-io-syntax" :label "macro" :clhs "Body/m_w_std_.htm")
      (gethash "write" *cl-reference-symbols*) '(:text "write" :label "function" :clhs "Body/f_wr_pr.htm")
      (gethash "write-byte" *cl-reference-symbols*) '(:text "write-byte" :label "function" :clhs "Body/f_wr_by.htm")
      (gethash "write-char" *cl-reference-symbols*) '(:text "write-char" :label "function" :clhs "Body/f_wr_cha.htm")
      (gethash "write-line" *cl-reference-symbols*) '(:text "write-line" :label "function" :clhs "Body/f_wr_stg.htm")
      (gethash "write-sequence" *cl-reference-symbols*) '(:text "write-sequence" :label "function" :clhs "Body/f_wr_seq.htm")
      (gethash "write-string" *cl-reference-symbols*) '(:text "write-string" :label "function" :clhs "Body/f_wr_stg.htm")
      (gethash "write-to-string" *cl-reference-symbols*) '(:text "write-to-string" :label "function" :clhs "Body/f_wr_to_.htm")
      (gethash "y-or-n-p" *cl-reference-symbols*) '(:text "y-or-n-p" :label "function" :clhs "Body/f_y_or_n.htm")
      (gethash "yes-or-no-p" *cl-reference-symbols*) '(:text "yes-or-no-p" :label "function" :clhs "Body/f_y_or_n.htm")
      (gethash "zerop" *cl-reference-symbols*) '(:text "zerop" :label "function" :clhs "Body/f_zerop.htm"))

;; EOF
