;;;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: LLTHW; Base: 10 -*-
;;;; file: utils.lisp

;;;; Copyright (c) 2012--2014 "the Phoeron" Colin J.E. Lupton <//thephoeron.com>
;;;; See LICENSE for additional information.

(in-package :llthw)

;; Loop over contents of book/ subdirectory, build pages automatically
(defmacro create-book-pages (files)
  "Loop over contents of 'book/' subdirectory, build pages automatically at compile time."
  `(progn
     ,@(loop for file in (eval files)
             collect `(define-easy-handler (,(intern (format nil "~:@(llthw-book-~A~)" (pathname-name file))) :uri ,(format nil "/book/~(~A~)/" (pathname-name file))) ()
                        (llthw-page ()
                          (cl-who:with-html-output (hunchentoot::*standard-output*)
                            (str (3bmd:parse-and-print-to-stream ,(format nil "book/~(~A~)" (file-namestring file)) hunchentoot::*standard-output* :format :html))))))))

;; Common Lisp Reference Symbols
;  Symbols labelled with <span class='label'>type</span>
;  - literals (not labelled, emphasized)
;  - wildcard (not labelled, emphasized)
;  - type-specifier (not labelled, emphasized)
;  - method-combination type (not labelled, emphasized)
;  - keyword parameter (not labelled, emphasized)
;  - format control: label-warning
;  - format control parameter: label-default
;  - functions: label-success
;  - generic functions: label-warning
;  - macros: label-danger
;  - reader-macros: label-danger
;  - specials: label-default
;  - variables: label-primary
;  - constants: label-info
(defparameter *cl-reference-symbols* '((:id "literal-double-quote" :text "\"" :label "literal")
                                       (:id "literal-single-quote" :text "\'" :label "literal")
                                       (:id "literal-open-parens" :text "(" :label "literal")
                                       (:id "literal-parens" :text "()" :label "literal")
                                       (:id "literal-close-parens" :text ")" :label "literal")
                                       (:id "multiply" :text "*" :label "function")
                                       (:id "type-specifier-asterix" :text "*" :label "type-specifier")
                                       (:id "wildcard-asterix" :text "\"...*...\"" :label "wildcard")
                                       (:id "literal-asterix" :text "*" :label "variable")
                                       (:id "literal-double-asterix" :text "**" :label "variable")
                                       (:id "literal-triple-asterix" :text "***" :label "variable")
                                       (:id "earmuff-break-on-signals" :text "*break-on-signals*" :label "variable")
                                       (:id "earmuff-compile-file-pathname" :text "*compile-file-pathname*" :label "variable")
                                       (:id "earmuff-compile-file-truename" :text "*compile-file-truename*" :label "variable")
                                       (:id "earmuff-compile-print" :text "*compile-print*" :label "variable")
                                       (:id "earmuff-compile-verbose" :text "*compile-verbose*" :label "variable")
                                       (:id "earmuff-debug-io" :text "*debug-io*" :label "variable")
                                       (:id "earmuff-debugger-hook" :text "*debugger-hook*" :label "variable")
                                       (:id "earmuff-default-pathname-defaults" :text "*default-pathname-defaults*" :label "variable")
                                       (:id "earmuff-error-output" :text "*error-output*" :label "variable")
                                       (:id "earmuff-features" :text "*features*" :label "variable")
                                       (:id "earmuff-gensym-counter" :text "*gensym-counter*" :label "variable")
                                       (:id "earmuff-load-pathname" :text "*load-pathname*" :label "variable")
                                       (:id "earmuff-load-print" :text "*load-print*" :label "variable")
                                       (:id "earmuff-load-truename" :text "*load-truename*" :label "variable")
                                       (:id "earmuff-load-verbose" :text "*load-verbose*" :label "variable")
                                       (:id "earmuff-macroexpand-hook" :text "*macroexpand-hook*" :label "variable")
                                       (:id "earmuff-modules" :text "*modules*" :label "variable")
                                       (:id "earmuff-package" :text "*package*" :label "variable")
                                       (:id "earmuff-print-array" :text "*print-array*" :label "variable")
                                       (:id "earmuff-print-base" :text "*print-base*" :label "variable")
                                       (:id "earmuff-print-case" :text "*print-case*" :label "variable")
                                       (:id "earmuff-print-circle" :text "*print-circle*" :label "variable")
                                       (:id "earmuff-print-escape" :text "*print-escape*" :label "variable")
                                       (:id "earmuff-print-gensym" :text "*print-gensym*" :label "variable")
                                       (:id "earmuff-print-length" :text "*print-length*" :label "variable")
                                       (:id "earmuff-print-level" :text "*print-level*" :label "variable")
                                       (:id "earmuff-print-lines" :text "*print-lines*" :label "variable")
                                       (:id "earmuff-print-miser-width" :text "*print-miser-width*" :label "variable")
                                       (:id "earmuff-print-pprint-dispatch" :text "*print-pprint-dispatch*" :label "variable")
                                       (:id "earmuff-print-pretty" :text "*print-pretty*" :label "variable")
                                       (:id "earmuff-print-radix" :text "*print-radix*" :label "variable")
                                       (:id "earmuff-print-readably" :text "*print-readably*" :label "variable")
                                       (:id "earmuff-print-right-margin" :text "*print-right-margin*" :label "variable")
                                       (:id "earmuff-query-io" :text "*query-io*" :label "variable")
                                       (:id "earmuff-random-state" :text "*random-state*" :label "variable")
                                       (:id "earmuff-read-base" :text "*read-base*" :label "variable")
                                       (:id "earmuff-read-default-float-format" :text "*read-default-float-format*" :label "variable")
                                       (:id "earmuff-read-eval" :text "*read-eval*" :label "variable")
                                       (:id "earmuff-read-suppress" :text "*read-suppress*" :label "variable")
                                       (:id "earmuff-readtable" :text "*readtable*" :label "variable")
                                       (:id "earmuff-standard-input" :text "*standard-input*" :label "variable")
                                       (:id "earmuff-standard-output" :text "*standard-output*" :label "variable")
                                       (:id "earmuff-terminal-io" :text "*terminal-io*" :label "variable")
                                       (:id "earmuff-trace-output" :text "*trace-output*" :label "variable")
                                       (:id "add" :text "+" :label "function")
                                       (:id "method-combination-plus-sign" :text "+" :label "method-combination type")
                                       (:id "literal-plus-sign" :text "+" :label "variable")
                                       (:id "literal-double-plus-sign" :text "++" :label "variable")
                                       (:id "literal-triple-plus-sign" :text "+++" :label "variable")
                                       (:id "literal-comma" :text "," :label "literal")
                                       (:id "literal-comma-dot" :text ",." :label "literal")
                                       (:id "literal-comma-at" :text ",@" :label "literal")
                                       (:id "minus" :text "-" :label "function")
                                       (:id "literal-minus-sign" :text "-" :label "literal")
                                       (:id "literal-dot" :text "." :label "literal")
                                       (:id "divide" :text "/" :label "function")
                                       (:id "ratio-slash" :text "/" :label "literal")
                                       (:id "literal-slash" :text "/" :label "variable")
                                       (:id "literal-double-slash" :text "//" :label "variable")
                                       (:id "literal-triple-slash" :text "///" :label "variable")
                                       (:id "not-equal" :text "/=" :label "function")
                                       (:id "literal-colon" :text ":" :label "literal")
                                       (:id "literal-double-colon" :text "::" :label "literal")
                                       (:id "colon-allow-other-keys" :text ":allow-other-keys" :label "keyword parameter")
                                       (:id "literal-semicolon" :text ";" :label "literal")
                                       (:id "literal-lt" :text "<" :label "function")
                                       (:id "literal-lt-equal" :text "<=" :label "function")
                                       (:id "loop-keyword-literal-equal" :text "=" :label "loop-keyword")
                                       (:id "literal-equal" :text "=" :label "function")
                                       (:id "literal-gt" :text ">" :label "function")
                                       (:id "literal-gt-equal" :text ">=" :label "function")
                                       (:id "literal-backslash" :text "\\" :label "literal")
                                       (:id "literal-hash" :text "#" :label "format control parameter")
                                       (:id "literal-hash-backslash" :text "#\\" :label "reader-macro")
                                       (:id "literal-hash-quote" :text "#\'" :label "reader-macro")
                                       (:id "literal-hash-parens" :text "#(...)" :label "reader-macro")
                                       (:id "literal-hash-asterix" :text "#*" :label "reader-macro")
                                       (:id "literal-hash-plus-sign" :text "#+" :label "reader-macro")
                                       (:id "literal-hash-minus-sign" :text "#-" :label "reader-macro")
                                       (:id "literal-hash-dot" :text "#." :label "reader-macro")
                                       (:id "literal-hash-colon" :text "#:" :label "reader-macro")
                                       (:id "literal-hash-lt" :text "#<" :label "reader-macro")
                                       (:id "literal-hash-equal" :text "#=" :label "reader-macro")
                                       (:id "literal-hash-a" :text "#A" :label "reader-macro")
                                       (:id "literal-hash-b" :text "#B" :label "reader-macro")
                                       (:id "literal-hash-c-parens" :text "#C(...)" :label "reader-macro")
                                       (:id "literal-hash-o" :text "#O" :label "reader-macro")
                                       (:id "literal-hash-p" :text "#P" :label "reader-macro")
                                       (:id "literal-hash-r" :text "#R" :label "reader-macro")
                                       (:id "literal-hash-s-parens" :text "#S(...)" :label "reader-macro")
                                       (:id "literal-hash-x" :text "#X" :label "reader-macro")
                                       (:id "literal-double-hash" :text "##" :label "reader-macro")
                                       (:id "literal-hash-bar" :text "#|...|#" :label "reader-macro")
                                       (:id "ampersand-allow-other-keys" :text "&allow-other-keys" :label "constant")
                                       (:id "ampersand-aux" :text "&aux" :label "constant")
                                       (:id "ampersand-body" :text "&body" :label "constant")
                                       (:id "ampersand-environment" :text "&environment" :label "constant")
                                       (:id "ampersand-key" :text "&key" :label "constant")
                                       (:id "ampersand-optional" :text "&optional" :label "constant")
                                       (:id "ampersand-rest" :text "&rest" :label "constant")
                                       (:id "ampersand-whole" :text "&whole" :label "constant")
                                       (:id "tilde-parens" :text "~( ... ~)" :label "format control")
                                       (:id "tilde-asterix" :text "~*" :label "format control")
                                       (:id "tilde-slashes" :text "~/ ... /" :label "format control")
                                       (:id "tilde-lt-to-tilde-colon-gt" :text "~< ... ~:>" :label "format control")
                                       (:id "tilde-lt-to-tilde-gt" :text "~< ... ~>" :label "format control")
                                       (:id "tilde-question-mark" :text "~?" :label "format control")
                                       (:id "tilde-a" :text "~A" :label "format control")
                                       (:id "tilde-b" :text "~B" :label "format control")
                                       (:id "tilde-c" :text "~C" :label "format control")
                                       (:id "tilde-d" :text "~D" :label "format control")
                                       (:id "tilde-e" :text "~E" :label "format control")
                                       (:id "tilde-f" :text "~F" :label "format control")
                                       (:id "tilde-g" :text "~G" :label "format control")
                                       (:id "tilde-i" :text "~I" :label "format control")
                                       (:id "tilde-o" :text "~O" :label "format control")
                                       (:id "tilde-p" :text "~P" :label "format control")
                                       (:id "tilde-r" :text "~R" :label "format control")
                                       (:id "tilde-s" :text "~S" :label "format control")
                                       (:id "tilde-t" :text "~T" :label "format control")
                                       (:id "tilde-w" :text "~W" :label "format control")
                                       (:id "tilde-x" :text "~X" :label "format control")
                                       (:id "tilde-square-bracket" :text "~[...~]" :label "format control")
                                       (:id "tilde-dollar-sign" :text "~$" :label "format control")
                                       (:id "tilde-percent-sign" :text "~%" :label "format control")
                                       (:id "tilde-ampersand" :text "~&" :label "format control")
                                       (:id "tilde-caron" :text "~^" :label "format control")
                                       (:id "tilde-underscore" :text "~_" :label "format control")
                                       (:id "tilde-bar" :text "~|" :label "format control")
                                       (:id "tilde-curly-braces" :text "~{...~}" :label "format control")
                                       (:id "tilde-tilde" :text "~~" :label "format control")
                                       (:id "tilde-newline" :text "~#\\Newline" :label "format control")
                                       (:id "literal-backtick" :text "\`" :label "literal")
                                       (:id "literal-hbars" :text "|...|" :label "literal")
                                       (:id "literal-one-plus" :text "1+" :label "function")
                                       (:id "literal-one-minus" :text "1-" :label "function")
                                       (:id "abort" :text "abort" :label "function")
                                       (:id "above" :text "above" :label "loop-keyword")
                                       (:id "abs" :text "abs" :label "function")
                                       (:id "acons" :text "acons" :label "function")
                                       (:id "acos" :text "acos" :label "function")
                                       (:id "acosh" :text "acosh" :label "function")
                                       (:id "across" :text "across" :label "loop-keyword")
                                       (:id "add-method" :text "add-method" :label "generic function")
                                       (:id "adjoin" :text "adjoin" :label "function")
                                       (:id "adjust-array" :text "adjust-array" :label "function")
                                       (:id "adjustable-array-p" :text "adjustable-array-p" :label "function")
                                       (:id "allocate-instance" :text "allocate-instance" :label "generic function")
                                       (:id "alpha-char-p" :text "alpha-char-p" :label "function")
                                       (:id "alphanumericp" :text "alphanumericp" :label "function")
                                       (:id "always" :text "always" :label "loop-keyword")
                                       (:id "macro-and" :text "and" :label "macro")
                                       (:id "loop-keyword-and" :text "and" :label "loop-keyword")
                                       (:id "method-combination-and" :text "and" :label "method-combination type")
                                       (:id "type-specifier-and" :text "and" :label "type-specifier")
                                       (:id "function-append" :text "append" :label "function")
                                       (:id "loop-keyword-append" :text "append" :label "loop-keyword")
                                       (:id "method-combination-append" :text "append" :label "method-combination type")
                                       (:id "appending" :text "appending" :label "loop-keyword")
                                       (:id "apply" :text "apply" :label "function")
                                       (:id "apropos" :text "apropos" :label "function")
                                       (:id "apropos-list" :text "apropos-list" :label "function")
                                       (:id "aref" :text "aref" :label "function")
                                       (:id "arithmetic-error" :text "arithmetic-error" :label "condition")
                                       (:id "arithmetic-error-operands" :text "arithmetic-error-operands" :label "function")
                                       (:id "arithmetic-error-operation" :text "arithmetic-error-operation" :label "function")
                                       (:id "array" :text "array" :label "type-specifier")
                                       (:id "array-dimension" :text "array-dimension" :label "function")
                                       (:id "array-dimension-limit" :text "array-dimension-limit" :label "constant")
                                       (:id "array-dimensions" :text "array-dimensions" :label "function")
                                       (:id "array-displacement" :text "array-displacement" :label "function")
                                       (:id "array-element-type" :text "array-element-type" :label "function")
                                       (:id "array-has-fill-pointer-p" :text "array-has-fill-pointer-p" :label "function")
                                       (:id "array-in-bounds-p" :text "array-in-bounds-p" :label "function")
                                       (:id "array-rank" :text "array-rank" :label "function")
                                       (:id "array-rank-limit" :text "array-rank-limit" :label "constant")
                                       (:id "array-row-major-index" :text "array-row-major-index" :label "function")
                                       (:id "array-total-size" :text "array-total-size" :label "function")
                                       (:id "array-total-size-limit" :text "array-total-size-limit" :label "constant")
                                       (:id "arrayp" :text "arrayp" :label "function")
                                       (:id "as" :text "as" :label "loop-keyword")
                                       (:id "ash" :text "ash" :label "function")
                                       (:id "asin" :text "asin" :label "function")
                                       (:id "asinh" :text "asinh" :label "function")
                                       (:id "assert" :text "assert" :label "macro")
                                       (:id "assoc" :text "assoc" :label "function")
                                       (:id "assoc-if" :text "assoc-if" :label "function")
                                       (:id "assoc-if-not" :text "assoc-if-not" :label "function")
                                       (:id "atan" :text "atan" :label "function")
                                       (:id "atanh" :text "atanh" :label "function")
                                       (:id "atom" :text "atom" :label "function")
                                       (:id "base-char" :text "base-char" :label "type-specifier")
                                       (:id "base-string" :text "base-string" :label "type-specifier")
                                       (:id "being" :text "being" :label "loop-keyword")
                                       (:id "below" :text "below" :label "loop-keyword")
                                       (:id "bignum" :text "bignum" :label "type-specifier")
                                       (:id "bit" :text "bit" :label "function")
                                       (:id "bit-and" :text "bit-and" :label "function")
                                       (:id "bit-andc1" :text "bit-andc1" :label "function")
                                       (:id "bit-andc2" :text "bit-andc2" :label "function")
                                       (:id "bit-eqv" :text "bit-eqv" :label "function")
                                       (:id "bit-ior" :text "bit-ior" :label "function")
                                       (:id "bit-nand" :text "bit-nand" :label "function")
                                       (:id "bit-nor" :text "bit-nor" :label "function")
                                       (:id "bit-not" :text "bit-not" :label "function")
                                       (:id "bit-orc1" :text "bit-orc1" :label "function")
                                       (:id "bit-orc2" :text "bit-orc2" :label "function")
                                       (:id "bit-vector" :text "bit-vector" :label "type-specifier")
                                       (:id "bit-vector-p" :text "bit-vector-p" :label "function")
                                       (:id "bit-xor" :text "bit-xor" :label "function")
                                       (:id "block" :text "block" :label "special")
                                       (:id "boole" :text "boole" :label "function")
                                       (:id "boole-1" :text "boole-1" :label "constant")
                                       (:id "boole-2" :text "boole-2" :label "constant")
                                       (:id "boole-and" :text "boole-and" :label "constant")
                                       (:id "boole-andc1" :text "boole-andc1" :label "constant")
                                       (:id "boole-andc2" :text "boole-andc2" :label "constant")
                                       (:id "boole-c1" :text "boole-c1" :label "constant")
                                       (:id "boole-c2" :text "boole-c2" :label "constant")
                                       (:id "boole-clr" :text "boole-clr" :label "constant")
                                       (:id "boole-eqv" :text "boole-eqv" :label "constant")
                                       (:id "boole-ior" :text "boole-ior" :label "constant")
                                       (:id "boole-nand" :text "boole-nand" :label "constant")
                                       (:id "boole-nor" :text "boole-nor" :label "constant")
                                       (:id "boole-orc1" :text "boole-orc1" :label "constant")
                                       (:id "boole-orc2" :text "boole-orc2" :label "constant")
                                       (:id "boole-set" :text "boole-set" :label "constant")
                                       (:id "boole-xor" :text "boole-xor" :label "constant")
                                       (:id "boolean" :text "boolean" :label "type-specifier")
                                       (:id "both-case-p" :text "both-case-p" :label "function")
                                       (:id "boundp" :text "boundp" :label "function")
                                       (:id "break" :text "break" :label "function")
                                       (:id "broadcast-stream" :text "broadcast-stream" :label "type-specifier")
                                       (:id "broadcast-stream-streams" :text "broadcast-stream-streams" :label "function")
                                       (:id "built-in-class" :text "built-in-class" :label "type-specifier")
                                       (:id "butlast" :text "butlast" :label "function")
                                       (:id "by" :text "by" :label "loop-keyword")
                                       (:id "byte" :text "byte" :label "function")
                                       (:id "byte-position" :text "byte-position" :label "function")
                                       (:id "byte-size" :text "byte-size" :label "function")
                                       (:id "caar" :text "caar" :label "function")
                                       (:id "cadr" :text "cadr" :label "function")
                                       (:id "call-arguments-limit" :text "call-arguments-limit" :label "constant")
                                       (:id "call-method" :text "call-method" :label "macro")
                                       (:id "call-next-method" :text "call-next-method" :label "function")
                                       (:id "car" :text "car" :label "function")
                                       (:id "case" :text "case" :label "macro")
                                       (:id "catch" :text "catch" :label "special")
                                       (:id "ccase" :text "ccase" :label "macro")
                                       (:id "cdar" :text "cdar" :label "function")
                                       (:id "cddr" :text "cddr" :label "function")
                                       (:id "cdr" :text "cdr" :label "function")
                                       (:id "ceiling" :text "ceiling" :label "function")
                                       (:id "cell-error" :text "cell-error" :label "condition")
                                       (:id "cell-error-name" :text "cell-error-name" :label "function")
                                       (:id "cerror" :text "cerror" :label "function")
                                       (:id "change-class" :text "change-class" :label "generic function")
                                       (:id "char" :text "char" :label "function")
                                       (:id "char-code" :text "char-code" :label "function")
                                       (:id "char-code-limit" :text "char-code-limit" :label "constant")
                                       (:id "char-downcase" :text "char-downcase" :label "function")
                                       (:id "char-equal" :text "char-equal" :label "function")
                                       (:id "char-greaterp" :text "char-greaterp" :label "function")
                                       (:id "char-int" :text "char-int" :label "function")
                                       (:id "char-lessp" :text "char-lessp" :label "function")
                                       (:id "char-name" :text "char-name" :label "function")
                                       (:id "char-not-equal" :text "char-not-equal" :label "function")
                                       (:id "char-not-greaterp" :text "char-not-greaterp" :label "function")
                                       (:id "char-not-lessp" :text "char-not-lessp" :label "function")
                                       (:id "char-upcase" :text "char-upcase" :label "function")
                                       (:id "char-literal-not-equal" :text "char/=" :label "function")
                                       (:id "char-literal-lt" :text "char<" :label "function")
                                       (:id "char-literal-lt-equal" :text "char<=" :label "function")
                                       (:id "char-literal-equal" :text "char=" :label "function")
                                       (:id "char-literal-gt" :text "char>" :label "function")
                                       (:id "char-literal-gt-equal" :text "char>=" :label "function")
                                       (:id "character" :text "character" :label "function")
                                       (:id "characterp" :text "characterp" :label "function")
                                       (:id "check-type" :text "check-type" :label "macro")
                                       (:id "cis" :text "cis" :label "function")
                                       (:id "cl" :text "cl" :label "standard package")
                                       (:id "cl-user" :text "cl-user" :label "standard package")
                                       (:id "class" :text "class" :label "type-specifier")
                                       (:id "class-name" :text "class-name" :label "generic function")
                                       (:id "class-of" :text "class-of" :label "function")
                                       (:id "clear-input" :text "clear-input" :label "function")
                                       (:id "clear-output" :text "clear-output" :label "function")
                                       (:id "close" :text "close" :label "function")
                                       (:id "clrhash" :text "clrhash" :label "function")
                                       (:id "code-char" :text "code-char" :label "function")
                                       (:id "coerce" :text "coerce" :label "function")
                                       (:id "collect" :text "collect" :label "loop-keyword")
                                       (:id "collecting" :text "collecting" :label "loop-keyword")
                                       (:id "common-lisp" :text "common-lisp" :label "standard package")
                                       (:id "common-lisp-user" :text "common-lisp-user" :label "standard package")
                                       (:id "compilation-speed" :text "compilation-speed" :label "declare expression")
                                       (:id "compile" :text "compile" :label "function")
                                       (:id "compile-file" :text "compile-file" :label "function")
                                       (:id "compile-file-pathname" :text "compile-file-pathname" :label "function")
                                       (:id "compiled-function" :text "compiled-function" :label "type-specifier")
                                       (:id "compiled-function-p" :text "compiled-function-p" :label "function")
                                       (:id "compiler-macro" :text "compiler-macro" :label "type-specifier")
                                       (:id "compiler-macro-function" :text "compiler-macro-function" :label "function")
                                       (:id "complement" :text "complement" :label "function")
                                       (:id "complex" :text "complex" :label "function")
                                       (:id "complexp" :text "complexp" :label "function")
                                       (:id "compute-applicable-methods" :text "compute-applicable-methods" :label "generic function")
                                       (:id "compute-restarts" :text "compute-restarts" :label "function")
                                       (:id "concatenate" :text "concatenate" :label "function")
                                       (:id "concatenated-stream" :text "concatenated-stream" :label "type-specifier")
                                       (:id "concatenated-stream-streams" :text "concatenated-stream-streams" :label "function")
                                       (:id "cond" :text "cond" :label "macro")
                                       (:id "condition" :text "condition" :label "condition")
                                       (:id "conjugate" :text "conjugate" :label "function")
                                       (:id "cons" :text "cons" :label "function")
                                       (:id "consp" :text "consp" :label "function")
                                       (:id "constantly" :text "constantly" :label "function")
                                       (:id "constantp" :text "constantp" :label "function")
                                       (:id "continue" :text "continue" :label "function")
                                       (:id "control-error" :text "control-error" :label "condition")
                                       (:id "copy-alist" :text "copy-alist" :label "function")
                                       (:id "copy-list" :text "copy-list" :label "function")
                                       (:id "copy-pprint-dispatch" :text "copy-pprint-dispatch" :label "function")
                                       (:id "copy-readtable" :text "copy-readtable" :label "function")
                                       (:id "copy-seq" :text "copy-seq" :label "function")
                                       (:id "copy-structure" :text "copy-structure" :label "function")
                                       (:id "copy-symbol" :text "copy-symbol" :label "function")
                                       (:id "copy-tree" :text "copy-tree" :label "function")
                                       (:id "cos" :text "cos" :label "function")
                                       (:id "cosh" :text "cosh" :label "function")
                                       (:id "loop-keyword-count" :text "count" :label "loop-keyword")
                                       (:id "count" :text "count" :label "function")
                                       (:id "count-if" :text "count-if" :label "function")
                                       (:id "count-if-not" :text "count-if-not" :label "function")
                                       (:id "counting" :text "counting" :label "loop-keyword")
                                       (:id "ctypecase" :text "ctypecase" :label "macro")
                                       (:id "debug" :text "debug" :label "declare expression")
                                       (:id "decf" :text "decf" :label "macro")
                                       (:id "declaim" :text "declaim" :label "macro")
                                       (:id "declaration" :text "declaration" :label "declare expression")
                                       (:id "declare" :text "declare" :label "declare expression")
                                       (:id "decode-float" :text "decode-float" :label "function")
                                       (:id "decode-universal-time" :text "decode-universal-time" :label "function")
                                       (:id "defclass" :text "defclass" :label "macro")
                                       (:id "defconstant" :text "defconstant" :label "macro")
                                       (:id "defgeneric" :text "defgeneric" :label "macro")
                                       (:id "define-compiler-macro" :text "define-compiler-macro" :label "function")
                                       (:id "define-condition" :text "define-condition" :label "macro")
                                       (:id "define-method-combination" :text "define-method-combination" :label "macro")
                                       (:id "define-modify-macro" :text "define-modify-macro" :label "macro")
                                       (:id "define-setf-expander" :text "define-setf-expander" :label "macro")
                                       (:id "define-symbol-macro" :text "define-symbol-macro" :label "macro")
                                       (:id "defmacro" :text "defmacro" :label "macro")
                                       (:id "defmethod" :text "defmethod" :label "macro")
                                       (:id "defpackage" :text "defpackage" :label "macro")
                                       (:id "defparameter" :text "defparameter" :label "macro")
                                       (:id "defsetf" :text "defsetf" :label "macro")
                                       (:id "defstruct" :text "defstruct" :label "macro")
                                       (:id "deftype" :text "deftype" :label "macro")
                                       (:id "defun" :text "defun" :label "macro")
                                       (:id "defvar" :text "defvar" :label "macro")
                                       (:id "delete" :text "delete" :label "function")
                                       (:id "delete-duplicates" :text "delete-duplicates" :label "function")
                                       (:id "delete-file" :text "delete-file" :label "function")
                                       (:id "delete-if" :text "delete-if" :label "function")
                                       (:id "delete-if-not" :text "delete-if-not" :label "function")
                                       (:id "delete-package" :text "delete-package" :label "function")
                                       (:id "denominator" :text "denominator" :label "function")
                                       (:id "deposit-field" :text "deposit-field" :label "function")
                                       (:id "describe" :text "describe" :label "function")
                                       (:id "describe-object" :text "describe-object" :label "generic function")
                                       (:id "destructuring-bind" :text "destructuring-bind" :label "macro")
                                       (:id "digit-char" :text "digit-char" :label "function")
                                       (:id "digit-char-p" :text "digit-char-p" :label "function")
                                       (:id "directory" :text "directory" :label "function")
                                       (:id "directory-namestring" :text "directory-namestring" :label "function")
                                       (:id "disassemble" :text "disassemble" :label "function")
                                       (:id "division-by-zero" :text "division-by-zero" :label "condition")
                                       (:id "loop-keyword-do" :text "do" :label "loop-keyword")
                                       (:id "do" :text "do" :label "macro")
                                       (:id "do-all-symbols" :text "do-all-symbols" :label "macro")
                                       (:id "do-external-symbols" :text "do-external-symbols" :label "macro")
                                       (:id "do-symbols" :text "do-symbols" :label "macro")
                                       (:id "do*" :text "do*" :label "macro")
                                       (:id "documentation" :text "documentation" :label "generic function")
                                       (:id "doing" :text "doing" :label "loop-keyword")
                                       (:id "dolist" :text "dolist" :label "macro")
                                       (:id "dotimes" :text "dotimes" :label "macro")
                                       (:id "double-float" :text "double-float" :label "type-specifier")
                                       (:id "double-float-epsilon" :text "double-float-epsilon" :label "constant")
                                       (:id "double-float-negative-epsilon" :text "double-float-negative-epsilon" :label "constant")
                                       (:id "downfrom" :text "downfrom" :label "loop-keyword")
                                       (:id "downto" :text "downto" :label "loop-keyword")
                                       (:id "dpb" :text "dpb" :label "function")
                                       (:id "dribble" :text "dribble" :label "dribble")
                                       (:id "dynamic-extent" :text "dynamic-extent" :label "declare expression")
                                       (:id "each" :text "each" :label "loop-keyword")
                                       (:id "ecase" :text "ecase" :label "macro")
                                       (:id "echo-stream" :text "echo-stream" :label "type-specifier")
                                       (:id "echo-stream-input-stream" :text "echo-stream-input-stream" :label "function")
                                       (:id "echo-stream-output-stream" :text "echo-stream-output-stream" :label "function")
                                       (:id "ed" :text "ed" :label "function")
                                       (:id "eighth" :text "eighth" :label "function")
                                       (:id "else" :text "else" :label "loop-keyword")
                                       (:id "elt" :text "elt" :label "function")
                                       (:id "encode-universal-time" :text "encode-universal-time" :label "function")
                                       (:id "end" :text "end" :label "loop-keyword")
                                       (:id "end-of-file" :text "end-of-file" :label "condition")
                                       (:id "endp" :text "endp" :label "function")
                                       (:id "enough-namestring" :text "enough-namestring" :label "function")
                                       (:id "ensure-directories-exist" :text "ensure-directories-exist" :label "function")
                                       (:id "ensure-generic-function" :text "ensure-generic-function" :label "function")
                                       (:id "eq" :text "eq" :label "function")
                                       (:id "eql" :text "eql" :label "function")
                                       (:id "equal" :text "equal" :label "function")
                                       (:id "equalp" :text "equalp" :label "function")
                                       (:id "error" :text "error" :label "function")
                                       (:id "etypecase" :text "etypecase" :label "macro")
                                       (:id "eval" :text "eval" :label "function")
                                       (:id "eval-when" :text "eval-when" :label "special")
                                       (:id "evenp" :text "evenp" :label "function")
                                       (:id "every" :text "every" :label "function")
                                       (:id "exp" :text "exp" :label "function")
                                       (:id "export" :text "export" :label "function")
                                       (:id "expt" :text "expt" :label "function")
                                       (:id "extended-char" :text "extended-char" :label "type-specifier")
                                       (:id "external-symbol" :text "external-symbol" :label "loop-keyword")
                                       (:id "external-symbols" :text "external-symbols" :label "loop-keyword")
                                       (:id "fboundp" :text "fboundp" :label "function")
                                       (:id "fceiling" :text "fceiling" :label "function")
                                       (:id "fdefinition" :text "fdefinition" :label "function")
                                       (:id "ffloor" :text "ffloor" :label "function")
                                       (:id "fifth" :text "fifth" :label "function")
                                       (:id "file-author" :text "file-author" :label "function")
                                       (:id "file-error" :text "file-error" :label "condition")
                                       (:id "file-error-pathname" :text "file-error-pathname" :label "function")
                                       (:id "file-length" :text "file-length" :label "function")
                                       (:id "file-namestring" :text "file-namestring" :label "function")
                                       (:id "file-position" :text "file-position" :label "function")
                                       (:id "file-stream" :text "file-stream" :label "type-specifier")
                                       (:id "file-string-length" :text "file-string-length" :label "function")
                                       (:id "file-write-date" :text "file-write-date" :label "function")
                                       (:id "fill" :text "fill" :label "function")
                                       (:id "fill-pointer" :text "fill-pointer" :label "function")
                                       (:id "finally" :text "finally" :label "loop-keyword")
                                       (:id "find" :text "find" :label "function")
                                       (:id "find-all-symbols" :text "find-all-symbols" :label "function")
                                       (:id "find-class" :text "find-class" :label "function")
                                       (:id "find-if" :text "find-if" :label "function")
                                       (:id "find-if-not" :text "find-if-not" :label "function")
                                       (:id "find-method" :text "find-method" :label "generic function")
                                       (:id "find-package" :text "find-package" :label "function")
                                       (:id "find-restart" :text "find-restart" :label "function")
                                       (:id "find-symbol" :text "find-symbol" :label "function")
                                       (:id "finish-output" :text "finish-output" :label "function")
                                       (:id "first" :text "first" :label "function")
                                       (:id "loop-keyword-fixnum" :text "fixnum" :label "loop-keyword")
                                       (:id "flet" :text "flet" :label "special")
                                       (:id "loop-keyword-float" :text "float" :label "loop-keyword")
                                       (:id "float" :text "float" :label "function")
                                       (:id "float-digits" :text "float-digits" :label "function")
                                       (:id "float-precision" :text "float-precision" :label "function")
                                       (:id "float-radix" :text "float-radix" :label "function")
                                       (:id "float-sign" :text "float-sign" :label "function")
                                       (:id "floating-point-inexact" :text "floating-point-inexact" :label "condition")
                                       (:id "floating-point-invalid-operation" :text "floating-point-invalid-operation" :label "condition")
                                       (:id "floating-point-overflow" :text "floating-point-overflow" :label "condition")
                                       (:id "floating-point-underflow" :text "floating-point-underflow" :label "condition")
                                       (:id "floatp" :text "floatp" :label "function")
                                       (:id "floor" :text "floor" :label "function")
                                       (:id "fmakunbound" :text "fmakunbound" :label "function")
                                       (:id "for" :text "for" :label "loop-keyword")
                                       (:id "force-output" :text "force-output" :label "function")
                                       (:id "format" :text "format" :label "function")
                                       (:id "formatter" :text "formatter" :label "macro")
                                       (:id "fourth" :text "fourth" :label "function")
                                       (:id "fresh-line" :text "fresh-line" :label "function")
                                       (:id "from" :text "from" :label "loop-keyword")
                                       (:id "fround" :text "fround" :label "function")
                                       (:id "ftruncate" :text "ftruncate" :label "function")
                                       (:id "ftype" :text "ftype" :label "declare expression")
                                       (:id "funcall" :text "funcall" :label "function")
                                       (:id "function" :text "function" :label "special")
                                       (:id "function-keywords" :text "function-keywords" :label "generic function")
                                       (:id "function-lambda-expression" :text "function-lambda-expression" :label "function")
                                       (:id "functionp" :text "functionp" :label "function")
                                       (:id "gcd" :text "gcd" :label "function")
                                       (:id "generic-function" :text "generic-function" :label "type-specifier")
                                       (:id "gensym" :text "gensym" :label "function")
                                       (:id "gentemp" :text "gentemp" :label "function")
                                       (:id "get" :text "get" :label "function")
                                       (:id "get-decoded-time" :text "get-decoded-time" :label "function")
                                       (:id "get-dispatch-macro-character" :text "get-dispatch-macro-character" :label "function")
                                       (:id "get-internal-real-time" :text "get-internal-real-time" :label "function")
                                       (:id "get-internal-run-time" :text "get-internal-run-time" :label "function")
                                       (:id "get-macro-character" :text "get-macro-character" :label "function")
                                       (:id "get-output-stream-string" :text "get-output-stream-string" :label "function")
                                       (:id "get-properties" :text "get-properties" :label "function")
                                       (:id "get-setf-expansion" :text "get-setf-expansion" :label "function")
                                       (:id "get-universal-time" :text "get-universal-time" :label "function")
                                       (:id "getf" :text "getf" :label "function")
                                       (:id "gethash" :text "gethash" :label "function")
                                       (:id "go" :text "go" :label "special")
                                       (:id "graphic-char-p" :text "graphic-char-p" :label "function")
                                       (:id "handler-bind" :text "handler-bind" :label "macro")
                                       (:id "handler-case" :text "handler-case" :label "macro")
                                       (:id "hash-key" :text "hash-key" :label "loop-keyword")
                                       (:id "hash-keys" :text "hash-keys" :label "loop-keyword")
                                       (:id "hash-table" :text "hash-table" :label "type-specifier")
                                       (:id "hash-table-count" :text "hash-table-count" :label "function")
                                       (:id "hash-table-p" :text "hash-table-p" :label "function")
                                       (:id "hash-table-rehash-size" :text "hash-table-rehash-size" :label "function")
                                       (:id "hash-table-rehash-threshold" :text "hash-table-rehash-threshold" :label "function")
                                       (:id "hash-table-size" :text "hash-table-size" :label "function")
                                       (:id "hash-table-test" :text "hash-table-test" :label "function")
                                       (:id "hash-value" :text "hash-value" :label "loop-keyword")
                                       (:id "hash-values" :text "hash-values" :label "loop-keyword")
                                       (:id "host-namestring" :text "host-namestring" :label "function")
                                       (:id "identify" :text "identify" :label "function")
                                       (:id "if" :text "if" :label "special")
                                       (:id "loop-keyword-if" :text "if" :label "loop-keyword")
                                       (:id "ignorable" :text "ignorable" :label "declare expression")
                                       (:id "ignore" :text "ignore" :label "declare expression")
                                       (:id "ignore-errors" :text "ignore-errors" :label "macro")
                                       (:id "imagpart" :text "imagpart" :label "function")
                                       (:id "import" :text "import" :label "function")
                                       (:id "in" :text "in" :label "loop-keyword")
                                       (:id "in-package" :text "in-package" :label "macro")
                                       (:id "incf" :text "incf" :label "macro")
                                       (:id "initialize-instance" :text "initialize-instance" :label "generic function")
                                       (:id "initially" :text "initially" :label "loop-keyword")
                                       (:id "inline" :text "inline" :label "declare expression")
                                       (:id "input-stream-p" :text "input-stream-p" :label "function")
                                       (:id "inspect" :text "inspect" :label "function")
                                       (:id "integer" :text "integer" :label "type-specifier")
                                       (:id "integer-decode-float" :text "integer-decode-float" :label "function")
                                       (:id "integer-length" :text "integer-length" :label "function")
                                       (:id "integerp" :text "integerp" :label "function")
                                       (:id "interactive-stream-p" :text "interactive-stream-p" :label "function")
                                       (:id "intern" :text "intern" :label "function")
                                       (:id "internal-time-units-per-second" :text "internal-time-units-per-second" :label "constant")
                                       (:id "intersection" :text "intersection" :label "function")
                                       (:id "into" :text "into" :label "loop-keyword")
                                       (:id "invalid-method-error" :text "invalid-method-error" :label "function")
                                       (:id "invoke-debugger" :text "invoke-debugger" :label "function")
                                       (:id "invoke-restart" :text "invoke-restart" :label "function")
                                       (:id "invoke-restart-interactively" :text "invoke-restart-interactively" :label "function")
                                       (:id "isqrt" :text "isqrt" :label "function")
                                       (:id "it" :text "it" :label "loop-keyword")
                                       (:id "keyword" :text "keyword" :label "standard package")
                                       (:id "keywordp" :text "keywordp" :label "function")
                                       (:id "labels" :text "labels" :label "special")
                                       (:id "lambda" :text "lambda" :label "macro")
                                       (:id "lambda-list-keywords" :text "lambda-list-keywords" :label "constant")
                                       (:id "lambda-parameters-limit" :text "lambda-parameters-limit" :label "constant")
                                       (:id "last" :text "last" :label "function")
                                       (:id "lcm" :text "lcm" :label "function")
                                       (:id "ldb" :text "ldb" :label "function")
                                       (:id "ldb-test" :text "ldb-test" :label "function")
                                       (:id "ldiff" :text "ldiff" :label "function")
                                       (:id "least-negative-double-float" :text "least-negative-double-float" :label "constant")
                                       (:id "least-negative-long-float" :text "least-negative-long-float" :label "constant")
                                       (:id "least-negative-normalized-double-float" :text "least-negative-normalized-double-float" :label "constant")
                                       (:id "least-negative-normalized-long-float" :text "least-negative-normalized-long-float" :label "constant")
                                       (:id "least-negative-normalized-short-float" :text "least-negative-normalized-short-float" :label "constant")
                                       (:id "least-negative-normalized-single-float" :text "least-negative-normalized-single-float" :label "constant")
                                       (:id "least-negative-short-float" :text "least-negative-short-float" :label "constant")
                                       (:id "least-negative-single-float" :text "least-negative-single-float" :label "constant")
                                       (:id "least-positive-double-float" :text "least-positive-double-float" :label "constant")
                                       (:id "least-positive-long-float" :text "least-positive-long-float" :label "constant")
                                       (:id "least-positive-normalized-double-float" :text "least-positive-normalized-double-float" :label "constant")
                                       (:id "least-positive-normalized-long-float" :text "least-positive-normalized-long-float" :label "constant")
                                       (:id "least-positive-normalized-short-float" :text "least-positive-normalized-short-float" :label "constant")
                                       (:id "least-positive-normalized-single-float" :text "least-positive-normalized-single-float" :label "constant")
                                       (:id "least-positive-short-float" :text "least-positive-short-float" :label "constant")
                                       (:id "least-positive-single-float" :text "least-positive-single-float" :label "constant")
                                       (:id "length" :text "length" :label "function")
                                       (:id "let" :text "let" :label "special")
                                       (:id "let-asterix" :text "let*" :label "special")
                                       (:id "lisp-implementation-type" :text "lisp-implementation-type" :label "function")
                                       (:id "lisp-implementation-version" :text "lisp-implementation-version" :label "function")
                                       (:id "function-list" :text "list" :label "function")
                                       (:id "method-combination-list" :text "list" :label "method-combination type")
                                       (:id "list-all-packages" :text "list-all-packages" :label "function")
                                       (:id "list-length" :text "list-length" :label "function")
                                       (:id "list-asterix" :text "list*" :label "function")
                                       (:id "listen" :text "listen" :label "function")
                                       (:id "listp" :text "listp" :label "function")
                                       (:id "load" :text "load" :label "function")
                                       (:id "load-logical-pathname-translations" :text "load-logical-pathname-translations" :label "function")
                                       (:id "load-time-value" :text "load-time-value" :label "special")
                                       (:id "locally" :text "locally" :label "special")
                                       (:id "log" :text "log" :label "function")
                                       (:id "logand" :text "logand" :label "function")
                                       (:id "logandc1" :text "logandc1" :label "function")
                                       (:id "logandc2" :text "logandc2" :label "function")
                                       (:id "logbitp" :text "logbitp" :label "function")
                                       (:id "logcount" :text "logcount" :label "function")
                                       (:id "logeqv" :text "logeqv" :label "function")
                                       (:id "logical-pathname" :text "logical-pathname" :label "function")
                                       (:id "logical-pathname-translations" :text "logical-pathname-translations" :label "function")
                                       (:id "logior" :text "logior" :label "function")
                                       (:id "lognand" :text "lognand" :label "function")
                                       (:id "lognor" :text "lognor" :label "function")
                                       (:id "lognot" :text "lognot" :label "function")
                                       (:id "logorc1" :text "logorc1" :label "function")
                                       (:id "logorc2" :text "logorc2" :label "function")
                                       (:id "logtest" :text "logtest" :label "function")
                                       (:id "logxor" :text "logxor" :label "function")
                                       (:id "long-float" :text "long-float" :label "type-specifier")
                                       (:id "long-float-epsilon" :text "long-float-epsilon" :label "constant")
                                       (:id "long-float-negative-epsilon" :text "long-float-negative-epsilon" :label "constant")
                                       (:id "long-site-name" :text "long-site-name" :label "function")
                                       (:id "loop" :text "loop" :label "macro")
                                       (:id "loop-finish" :text "loop-finish" :label "macro")
                                       (:id "lower-case-p" :text "lower-case-p" :label "function")
                                       (:id "machine-instance" :text "machine-instance" :label "function")
                                       (:id "machine-type" :text "machine-type" :label "function")
                                       (:id "machine-version" :text "machine-version" :label "function")
                                       (:id "macro-function" :text "macro-function" :label "function")
                                       (:id "macroexpand" :text "macroexpand" :label "function")
                                       (:id "macroexpand-once" :text "macroexpand-1" :label "function")
                                       (:id "macrolet" :text "macrolet" :label "special")
                                       (:id "make-array" :text "make-array" :label "function")
                                       (:id "make-broadcast-stream" :text "make-broadcast-stream" :label "function")
                                       (:id "make-concatenated-stream" :text "make-concatenated-stream" :label "function")
                                       (:id "make-condition" :text "make-condition" :label "function")
                                       (:id "make-dispatch-macro-character" :text "make-dispatch-macro-character" :label "function")
                                       (:id "make-echo-stream" :text "make-echo-stream" :label "function")
                                       (:id "make-hash-table" :text "make-hash-table" :label "function")
                                       (:id "make-instance" :text "make-instance" :label "generic function")
                                       (:id "make-instances-obsolete" :text "make-instances-obsolete" :label "generic function")
                                       (:id "make-list" :text "make-list" :label "function")
                                       (:id "make-load-form" :text "make-load-form" :label "generic function")
                                       (:id "make-load-form-saving-slots" :text "make-load-form-saving-slots" :label "function")
                                       (:id "make-method" :text "make-method" :label "function")
                                       (:id "make-package" :text "make-package" :label "function")
                                       (:id "make-pathname" :text "make-pathname" :label "function")
                                       (:id "make-random-state" :text "make-random-state" :label "function")
                                       (:id "make-sequence" :text "make-sequence" :label "function")
                                       (:id "make-string" :text "make-string" :label "function")
                                       (:id "make-string-input-stream" :text "make-string-input-stream" :label "function")
                                       (:id "make-string-output-stream" :text "make-string-output-stream" :label "function")
                                       (:id "make-symbol" :text "make-symbol" :label "function")
                                       (:id "make-synonym-stream" :text "make-synonym-stream" :label "function")
                                       (:id "make-two-way-stream" :text "make-two-way-stream" :label "function")
                                       (:id "makunbound" :text "makunbound" :label "function")
                                       (:id "map" :text "map" :label "function")
                                       (:id "map-into" :text "map-into" :label "function")
                                       (:id "mapc" :text "mapc" :label "function")
                                       (:id "mapcan" :text "mapcan" :label "function")
                                       (:id "mapcar" :text "mapcar" :label "function")
                                       (:id "mapcon" :text "mapcon" :label "function")
                                       (:id "maphash" :text "maphash" :label "function")
                                       (:id "mapl" :text "mapl" :label "function")
                                       (:id "maplist" :text "maplist" :label "function")
                                       (:id "mask-field" :text "mask-field" :label "function")
                                       (:id "method-combination-max" :text "max" :label "method-combination type")
                                       (:id "max" :text "max" :label "function")
                                       (:id "maximize" :text "maximize" :label "loop-keyword")
                                       (:id "maximizing" :text "maximizing" :label "loop-keyword")
                                       (:id "member" :text "member" :label "function")
                                       (:id "member-if" :text "member-if" :label "function")
                                       (:id "member-if-not" :text "member-if-not" :label "function")
                                       (:id "merge" :text "merge" :label "function")
                                       (:id "merge-pathnames" :text "merge-pathnames" :label "function")
                                       (:id "method" :text "method" :label "type-specifier")
                                       (:id "method-combination" :text "method-combination" :label "method-combination type")
                                       (:id "method-combination-error" :text "method-combination-error" :label "function")
                                       (:id "method-qualifiers" :text "method-qualifiers" :label "generic function")
                                       (:id "function-min" :text "min" :label "function")
                                       (:id "method-combination-min" :text "min" :label "method-combination type")
                                       (:id "minimize" :text "minimize" :label "loop-keyword")
                                       (:id "minimizing" :text "minimizing" :label "loop-keyword")
                                       (:id "minusp" :text "minusp" :label "function")
                                       (:id "mismatch" :text "mismatch" :label "function")
                                       (:id "mod" :text "mod" :label "function")
                                       (:id "most-negative-double-float" :text "most-negative-double-float" :label "constant")
                                       (:id "most-negative-fixnum" :text "most-negative-fixnum" :label "constant")
                                       (:id "most-negative-long-float" :text "most-negative-long-float" :label "constant")
                                       (:id "most-negative-short-float" :text "most-negative-short-float" :label "constant")
                                       (:id "most-negative-single-float" :text "most-negative-single-float" :label "constant")
                                       (:id "most-positive-double-float" :text "most-positive-double-float" :label "constant")
                                       (:id "most-positive-fixnum" :text "most-positive-fixnum" :label "constant")
                                       (:id "most-positive-long-float" :text "most-positive-long-float" :label "constant")
                                       (:id "most-positive-short-float" :text "most-positive-short-float" :label "constant")
                                       (:id "most-positive-single-float" :text "most-positive-single-float" :label "constant")
                                       (:id "muffle-warning" :text "muffle-warning" :label "function")
                                       (:id "multiple-value-bind" :text "multiple-value-bind" :label "macro")
                                       (:id "multiple-value-call" :text "multiple-value-call" :label "special")
                                       (:id "multiple-value-list" :text "multiple-value-list" :label "function")
                                       (:id "multiple-value-prog1" :text "multiple-value-prog1" :label "special")
                                       (:id "multiple-value-setq" :text "multiple-value-setq" :label "macro")
                                       (:id "multiple-values-limit" :text "multiple-values-limit" :label "constant")
                                       (:id "name-char" :text "name-char" :label "function")
                                       (:id "named" :text "named" :label "loop-keyword")
                                       (:id "namestring" :text "namestring" :label "function")
                                       (:id "nbutlast" :text "nbutlast" :label "function")
                                       (:id "loop-keyword-nconc" :text "nconc" :label "loop-keyword")
                                       (:id "method-combination-nconc" :text "nconc" :label "method-combination type")
                                       (:id "nconc" :text "nconc" :label "function")
                                       (:id "nconcing" :text "nconcing" :label "loop-keyword")
                                       (:id "never" :text "never" :label "loop-keyword")
                                       (:id "next-method-p" :text "next-method-p" :label "function")
                                       (:id "nil" :text "nil" :label "constant")
                                       (:id "nintersection" :text "nintersection" :label "function")
                                       (:id "ninth" :text "ninth" :label "function")
                                       (:id "no-applicable-method" :text "no-applicable-method" :label "generic function")
                                       (:id "no-next-method" :text "no-next-method" :label "generic function")
                                       (:id "not" :text "not" :label "function")
                                       (:id "notany" :text "notany" :label "function")
                                       (:id "notevery" :text "notevery" :label "function")
                                       (:id "notinline" :text "notinline" :label "declare expression")
                                       (:id "nreconc" :text "nreconc" :label "function")
                                       (:id "nreverse" :text "nreverse" :label "function")
                                       (:id "nset-difference" :text "nset-difference" :label "function")
                                       (:id "nset-exclusive-or" :text "nset-exclusive-or" :label "function")
                                       (:id "nstring-capitalize" :text "nstring-capitalize" :label "function")
                                       (:id "nstring-downcase" :text "nstring-downcase" :label "function")
                                       (:id "nstring-upcase" :text "nstring-upcase" :label "function")
                                       (:id "nsublis" :text "nsublis" :label "function")
                                       (:id "nsubst" :text "nsubst" :label "function")
                                       (:id "nsubst-if" :text "nsubst-if" :label "function")
                                       (:id "nsubst-if-not" :text "nsubst-if-not" :label "function")
                                       (:id "nsubstitute" :text "nsubstitute" :label "function")
                                       (:id "nsubstitute-if" :text "nsubstitute-if" :label "function")
                                       (:id "nsubstitute-if-not" :text "nsubstitute-if-not" :label "function")
                                       (:id "nth" :text "nth" :label "function")
                                       (:id "nth-value" :text "nth-value" :label "macro")
                                       (:id "nthcdr" :text "nthcdr" :label "function")
                                       (:id "null" :text "null" :label "function")
                                       (:id "number" :text "number" :label "type-specifier")
                                       (:id "numberp" :text "numberp" :label "function")
                                       (:id "numerator" :text "numerator" :label "function")
                                       (:id "nunion" :text "nunion" :label "function")
                                       (:id "oddp" :text "oddp" :label "function")
                                       (:id "of" :text "of" :label "loop-keyword")
                                       (:id "of-type" :text "of-type" :label "loop-keyword")
                                       (:id "on" :text "on" :label "loop-keyword")
                                       (:id "open" :text "open" :label "function")
                                       (:id "open-stream-p" :text "open-stream-p" :label "function")
                                       (:id "optimize" :text "optimize" :label "declare expression")
                                       (:id "method-combination-or" :text "or" :label "method-combination type")
                                       (:id "or" :text "or" :label "macro")
                                       (:id "otherwise" :text "otherwise" :label "keyword")
                                       (:id "output-stream-p" :text "output-stream-p" :label "function")
                                       (:id "package" :text "package" :label "type-specifier")
                                       (:id "package-error" :text "package-error" :label "condition")
                                       (:id "package-error-package" :text "package-error-package" :label "function")
                                       (:id "package-name" :text "package-name" :label "function")
                                       (:id "package-nicknames" :text "package-nicknames" :label "function")
                                       (:id "package-shadowing-symbols" :text "package-shadowing-symbols" :label "function")
                                       (:id "package-use-list" :text "package-use-list" :label "function")
                                       (:id "package-used-by-list" :text "package-used-by-list" :label "function")
                                       (:id "packagep" :text "packagep" :label "function")
                                       (:id "pairlis" :text "pairlis" :label "function")
                                       (:id "parse-error" :text "parse-error" :label "condition")
                                       (:id "parse-integer" :text "parse-integer" :label "function")
                                       (:id "parse-namestring" :text "parse-namestring" :label "function")
                                       (:id "pathname" :text "pathname" :label "function")
                                       (:id "pathname-device" :text "pathname-device" :label "function")
                                       (:id "pathname-directory" :text "pathname-directory" :label "function")
                                       (:id "pathname-host" :text "pathname-host" :label "function")
                                       (:id "pathname-match-p" :text "pathname-match-p" :label "function")
                                       (:id "pathname-name" :text "pathname-name" :label "function")
                                       (:id "pathname-type" :text "pathname-type" :label "function")
                                       (:id "pathname-version" :text "pathname-version" :label "function")
                                       (:id "pathnamep" :text "pathnamep" :label "function")
                                       (:id "peek-char" :text "peek-char" :label "function")
                                       (:id "phase" :text "phase" :label "function")
                                       (:id "pi" :text "pi" :label "constant")
                                       (:id "plusp" :text "plusp" :label "function")
                                       (:id "pop" :text "pop" :label "macro")
                                       (:id "position" :text "position" :label "function")
                                       (:id "position-if" :text "position-if" :label "function")
                                       (:id "position-if-not" :text "position-if-not" :label "function")
                                       (:id "pprint" :text "pprint" :label "function")
                                       (:id "pprint-dispatch" :text "pprint-dispatch" :label "function")
                                       (:id "pprint-exit-if-list-exhausted" :text "pprint-exit-if-list-exhausted" :label "macro")
                                       (:id "pprint-fill" :text "pprint-fill" :label "function")
                                       (:id "pprint-indent" :text "pprint-indent" :label "function")
                                       (:id "pprint-linear" :text "pprint-linear" :label "function")
                                       (:id "pprint-logical-block" :text "pprint-logical-block" :label "macro")
                                       (:id "pprint-newline" :text "pprint-newline" :label "function")
                                       (:id "pprint-pop" :text "pprint-pop" :label "macro")
                                       (:id "pprint-tab" :text "pprint-tab" :label "function")
                                       (:id "pprint-tabular" :text "pprint-tabular" :label "function")
                                       (:id "present-symbol" :text "present-symbol" :label "loop-keyword")
                                       (:id "present-symbols" :text "present-symbols" :label "loop-keyword")
                                       (:id "prin1" :text "prin1" :label "function")
                                       (:id "prin1-to-string" :text "prin1-to-string" :label "function")
                                       (:id "princ" :text "princ" :label "function")
                                       (:id "princ-to-string" :text "princ-to-string" :label "function")
                                       (:id "print" :text "print" :label "function")
                                       (:id "print-not-readable" :text "print-not-readable" :label "condition")
                                       (:id "print-not-readable-object" :text "print-not-readable-object" :label "function")
                                       (:id "print-object" :text "print-object" :label "generic function")
                                       (:id "print-unreadable-object" :text "print-unreadable-object" :label "macro")
                                       (:id "probe-file" :text "probe-file" :label "function")
                                       (:id "proclaim" :text "proclaim" :label "function")
                                       (:id "prog" :text "prog" :label "macro")
                                       (:id "prog1" :text "prog1" :label "macro")
                                       (:id "prog2" :text "prog2" :label "macro")
                                       (:id "prog-asterix" :text "prog*" :label "macro")
                                       (:id "method-combination-progn" :text "progn" :label "method-combination type")
                                       (:id "progn" :text "progn" :label "special")
                                       (:id "program-error" :text "program-error" :label "condition")
                                       (:id "progv" :text "progv" :label "special")
                                       (:id "provide" :text "provide" :label "function")
                                       (:id "psetf" :text "psetf" :label "macro")
                                       (:id "psetq" :text "psetq" :label "macro")
                                       (:id "push" :text "push" :label "macro")
                                       (:id "pushnew" :text "pushnew" :label "macro")
                                       (:id "quote" :text "quote" :label "special")
                                       (:id "random" :text "random" :label "function")
                                       (:id "random-state" :text "random-state" :label "type-specifier")
                                       (:id "random-state-p" :text "random-state-p" :label "function")
                                       (:id "rassoc" :text "rassoc" :label "function")
                                       (:id "rassoc-if" :text "rassoc-if" :label "function")
                                       (:id "rassoc-if-not" :text "rassoc-if-not" :label "function")
                                       (:id "ratio" :text "ratio" :label "type-specifier")
                                       (:id "rational" :text "rational" :label "function")
                                       (:id "rationalize" :text "rationalize" :label "function")
                                       (:id "rationalp" :text "rationalp" :label "function")
                                       (:id "read" :text "read" :label "function")
                                       (:id "read-byte" :text "read-byte" :label "function")
                                       (:id "read-char" :text "read-char" :label "function")
                                       (:id "read-char-no-hang" :text "read-char-no-hang" :label "function")
                                       (:id "read-delimited-list" :text "read-delimited-list" :label "function")
                                       (:id "read-from-string" :text "read-from-string" :label "function")
                                       (:id "read-line" :text "read-line" :label "function")
                                       (:id "read-preserving-whitespace" :text "read-preserving-whitespace" :label "function")
                                       (:id "read-sequence" :text "read-sequence" :label "function")
                                       (:id "reader-error" :text "reader-error" :label "condition")
                                       (:id "readtable" :text "readtable" :label "type-specifier")
                                       (:id "readtable-case" :text "readtable-case" :label "function")
                                       (:id "readtablep" :text "readtablep" :label "function")
                                       (:id "real" :text "real" :label "type-specifier")
                                       (:id "realp" :text "realp" :label "function")
                                       (:id "realpart" :text "realpart" :label "function")
                                       (:id "reduce" :text "reduce" :label "function")
                                       (:id "reinitialize-instance" :text "reinitialize-instance" :label "generic function")
                                       (:id "rem" :text "rem" :label "function")
                                       (:id "remf" :text "remf" :label "macro")
                                       (:id "remhash" :text "remhash" :label "function")
                                       (:id "remove" :text "remove" :label "function")
                                       (:id "remove-duplicates" :text "remove-duplicates" :label "function")
                                       (:id "remove-if" :text "remove-if" :label "function")
                                       (:id "remove-if-not" :text "remove-if-not" :label "function")
                                       (:id "remove-method" :text "remove-method" :label "generic function")
                                       (:id "remprop" :text "remprop" :label "function")
                                       (:id "rename-file" :text "rename-file" :label "function")
                                       (:id "rename-package" :text "rename-package" :label "function")
                                       (:id "repeat" :text "repeat" :label "loop-keyword")
                                       (:id "replace" :text "replace" :label "function")
                                       (:id "require" :text "require" :label "function")
                                       (:id "rest" :text "rest" :label "function")
                                       (:id "restart" :text "restart" :label "type-specifier")
                                       (:id "restart-bind" :text "restart-bind" :label "macro")
                                       (:id "restart-case" :text "restart-case" :label "macro")
                                       (:id "restart-name" :text "restart-name" :label "function")
                                       (:id "loop-keyword-return" :text "return" :label "loop-keyword")
                                       (:id "return" :text "return" :label "macro")
                                       (:id "return-from" :text "return-from" :label "special")
                                       (:id "revappend" :text "revappend" :label "function")
                                       (:id "reverse" :text "reverse" :label "function")
                                       (:id "room" :text "room" :label "function")
                                       (:id "rotatef" :text "rotatef" :label "macro")
                                       (:id "round" :text "round" :label "function")
                                       (:id "row-major-aref" :text "row-major-aref" :label "function")
                                       (:id "rplaca" :text "rplaca" :label "function")
                                       (:id "rplacd" :text "rplacd" :label "function")
                                       (:id "safety" :text "safety" :label "declare expression")
                                       (:id "satisfies" :text "satisfies" :label "type-specifier")
                                       (:id "sbit" :text "sbit" :label "function")
                                       (:id "scale-float" :text "scale-float" :label "function")
                                       (:id "schar" :text "schar" :label "function")
                                       (:id "search" :text "search" :label "function")
                                       (:id "second" :text "second" :label "function")
                                       (:id "sequence" :text "sequence" :label "type-specifier")
                                       (:id "serious-condition" :text "serious-condition" :label "condition")
                                       (:id "set" :text "set" :label "function")
                                       (:id "set-difference" :text "set-difference" :label "function")
                                       (:id "set-dispatch-macro-character" :text "set-dispatch-macro-character" :label "function")
                                       (:id "set-exclusive-or" :text "set-exclusive-or" :label "function")
                                       (:id "set-macro-character" :text "set-macro-character" :label "function")
                                       (:id "set-pprint-dispatch" :text "set-pprint-dispatch" :label "function")
                                       (:id "set-syntax-from-char" :text "set-syntax-from-char" :label "function")
                                       (:id "setf" :text "setf" :label "macro")
                                       (:id "setq" :text "setq" :label "special")
                                       (:id "seventh" :text "seventh" :label "function")
                                       (:id "shadow" :text "shadow" :label "function")
                                       (:id "shadowing-import" :text "shadowing-import" :label "function")
                                       (:id "shared-initialize" :text "shared-initialize" :label "generic function")
                                       (:id "shiftf" :text "shiftf" :label "macro")
                                       (:id "short-float" :text "short-float" :label "type-specifier")
                                       (:id "short-float-epsilon" :text "short-float-epsilon" :label "constant")
                                       (:id "short-float-negative-epsilon" :text "short-float-negative-epsilon" :label "constant")
                                       (:id "short-site-name" :text "short-site-name" :label "function")
                                       (:id "signal" :text "signal" :label "function")
                                       (:id "signed-byte" :text "signed-byte" :label "type-specifier")
                                       (:id "signum" :text "signum" :label "function")
                                       (:id "simple-array" :text "simple-array" :label "type-specifier")
                                       (:id "simple-base-string" :text "simple-base-string" :label "type-specifier")
                                       (:id "simple-bit-vector" :text "simple-bit-vector" :label "type-specifier")
                                       (:id "simple-bit-vector-p" :text "simple-bit-vector-p" :label "function")
                                       (:id "simple-condition" :text "simple-condition" :label "condition")
                                       (:id "simple-condition-format-arguments" :text "simple-condition-format-arguments" :label "function")
                                       (:id "simple-condition-format-control" :text "simple-condition-format-control" :label "function")
                                       (:id "simple-error" :text "simple-error" :label "condition")
                                       (:id "simple-string" :text "simple-string" :label "type-specifier")
                                       (:id "simple-string-p" :text "simple-string-p" :label "function")
                                       (:id "simple-type-error" :text "simple-type-error" :label "condition")
                                       (:id "simple-vector" :text "simple-vector" :label "type-specifier")
                                       (:id "simple-vector-p" :text "simple-vector-p" :label "function")
                                       (:id "simple-warning" :text "simple-warning" :label "condition")
                                       (:id "sin" :text "sin" :label "function")
                                       (:id "single-float" :text "single-float" :label "type-specifier")
                                       (:id "single-float-epsilon" :text "single-float-epsilon" :label "constant")
                                       (:id "single-float-negative-epsilon" :text "single-float-negative-epsilon" :label "constant")
                                       (:id "sinh" :text "sinh" :label "function")
                                       (:id "sixth" :text "sixth" :label "function")
                                       (:id "sleep" :text "sleep" :label "function")
                                       (:id "slot-boundp" :text "slot-boundp" :label "function")
                                       (:id "slot-exists-p" :text "slot-exists-p" :label "function")
                                       (:id "slot-makunbound" :text "slot-makunbound" :label "function")
                                       (:id "slot-missing" :text "slot-missing" :label "generic function")
                                       (:id "slot-unbound" :text "slot-unbound" :label "generic function")
                                       (:id "slot-value" :text "slot-value" :label "function")
                                       (:id "software-type" :text "software-type" :label "function")
                                       (:id "software-version" :text "software-version" :label "function")
                                       (:id "some" :text "some" :label "function")
                                       (:id "sort" :text "sort" :label "function")
                                       (:id "space" :text "space" :label "declare expression")
                                       (:id "special" :text "special" :label "declare expression")
                                       (:id "special-operator-p" :text "special-operator-p" :label "function")
                                       (:id "speed" :text "speed" :label "declare expression")
                                       (:id "sqrt" :text "sqrt" :label "function")
                                       (:id "stable-sort" :text "stable-sort" :label "function")
                                       (:id "standard" :text "standard" :label "method-combination type")
                                       (:id "standard-char" :text "standard-char" :label "type-specifier")
                                       (:id "standard-char-p" :text "standard-char-p" :label "function")
                                       (:id "standard-class" :text "standard-class" :label "type-specifier")
                                       (:id "standard-generic-function" :text "standard-generic-function" :label "type-specifier")
                                       (:id "standard-method" :text "standard-method" :label "type-specifier")
                                       (:id "standard-object" :text "standard-object" :label "type-specifier")
                                       (:id "step" :text "step" :label "macro")
                                       (:id "storage-condition" :text "storage-condition" :label "condition")
                                       (:id "store-value" :text "store-value" :label "function")
                                       (:id "stream" :text "stream" :label "type-specifier")
                                       (:id "stream-element-type" :text "stream-element-type" :label "function")
                                       (:id "stream-error" :text "stream-error" :label "condition")
                                       (:id "stream-error-stream" :text "stream-error-stream" :label "function")
                                       (:id "stream-external-format" :text "stream-external-format" :label "function")
                                       (:id "streamp" :text "streamp" :label "function")
                                       (:id "string" :text "string" :label "function")
                                       (:id "string-capitalize" :text "string-capitalize" :label "function")
                                       (:id "string-downcase" :text "string-downcase" :label "function")
                                       (:id "string-equal" :text "string-equal" :label "function")
                                       (:id "string-greaterp" :text "string-greaterp" :label "function")
                                       (:id "string-left-trim" :text "string-left-trim" :label "function")
                                       (:id "string-lessp" :text "string-lessp" :label "function")
                                       (:id "string-not-equal" :text "string-not-equal" :label "function")
                                       (:id "string-not-greaterp" :text "string-not-greaterp" :label "function")
                                       (:id "string-not-lessp" :text "string-not-lessp" :label "function")
                                       (:id "string-right-trim" :text "string-right-trim" :label "function")
                                       (:id "string-stream" :text "string-stream" :label "type-specifier")
                                       (:id "string-trim" :text "string-trim" :label "function")
                                       (:id "string-upcase" :text "string-upcase" :label "function")
                                       (:id "string-literal-not-equal" :text "string/=" :label "function")
                                       (:id "string-literal-lt" :text "string<" :label "function")
                                       (:id "string-literal-lt-equal" :text "string<=" :label "function")
                                       (:id "string-literal-equal" :text "string=" :label "function")
                                       (:id "string-literal-gt" :text "string>" :label "function")
                                       (:id "string-literal-gt-equal" :text "string>=" :label "function")
                                       (:id "stringp" :text "stringp" :label "function")
                                       (:id "structure" :text "structure" :label "type-specifier")
                                       (:id "structure-class" :text "structure-class" :label "type-specifier")
                                       (:id "structure-object" :text "structure-object" :label "type-specifier")
                                       (:id "style-warning" :text "style-warning" :label "condition")
                                       (:id "sublis" :text "sublis" :label "function")
                                       (:id "subseq" :text "subseq" :label "function")
                                       (:id "subsetp" :text "subsetp" :label "function")
                                       (:id "subst" :text "subst" :label "function")
                                       (:id "subst-if" :text "subst-if" :label "function")
                                       (:id "subst-if-not" :text "subst-if-not" :label "function")
                                       (:id "substitute" :text "substitute" :label "function")
                                       (:id "substitute-if" :text "substitute-if" :label "function")
                                       (:id "substitute-if-not" :text "substitute-if-not" :label "function")
                                       (:id "subtypep" :text "subtypep" :label "function")
                                       (:id "sum" :text "sum" :label "loop-keyword")
                                       (:id "summing" :text "summing" :label "loop-keyword")
                                       (:id "svref" :text "svref" :label "function")
                                       (:id "sxhash" :text "sxhash" :label "function")
                                       (:id "symbol" :text "symbol" :label "loop-keyword")
                                       (:id "symbol-function" :text "symbol-function" :label "function")
                                       (:id "symbol-macrolet" :text "symbol-macrolet" :label "special")
                                       (:id "symbol-name" :text "symbol-name" :label "function")
                                       (:id "symbol-package" :text "symbol-package" :label "function")
                                       (:id "symbol-plist" :text "symbol-plist" :label "function")
                                       (:id "symbol-value" :text "symbol-value" :label "function")
                                       (:id "symbolp" :text "symbolp" :label "function")
                                       (:id "symbols" :text "symbols" :label "loop-keyword")
                                       (:id "synonym-stream" :text "synonym-stream" :label "type-specifier")
                                       (:id "synonym-stream-symbol" :text "synonym-stream-symbol" :label "function")
                                       (:id "literal-t" :text "t" :label "constant")
                                       (:id "tagbody" :text "tagbody" :label "special")
                                       (:id "tailp" :text "tailp" :label "function")
                                       (:id "tan" :text "tan" :label "function")
                                       (:id "tanh" :text "tanh" :label "function")
                                       (:id "tenth" :text "tenth" :label "function")
                                       (:id "terpri" :text "terpri" :label "function")
                                       (:id "loop-keyword-the" :text "the" :label "loop-keyword")
                                       (:id "the" :text "the" :label "special")
                                       (:id "then" :text "then" :label "loop-keyword")
                                       (:id "thereis" :text "thereis" :label "loop-keyword")
                                       (:id "third" :text "third" :label "function")
                                       (:id "throw" :text "throw" :label "special")
                                       (:id "time" :text "time" :label "macro")
                                       (:id "to" :text "to" :label "loop-keyword")
                                       (:id "trace" :text "trace" :label "macro")
                                       (:id "translate-logical-pathname" :text "translate-logical-pathname" :label "function")
                                       (:id "translate-pathname" :text "translate-pathname" :label "function")
                                       (:id "tree-equal" :text "tree-equal" :label "function")
                                       (:id "truename" :text "truename" :label "function")
                                       (:id "truncate" :text "truncate" :label "function")
                                       (:id "two-way-stream" :text "two-way-stream" :label "type-specifier")
                                       (:id "two-way-stream-input-stream" :text "two-way-stream-input-stream" :label "function")
                                       (:id "two-way-stream-output-stream" :text "two-way-stream-output-stream" :label "function")
                                       (:id "type" :text "type" :label "declare expression")
                                       (:id "type-error" :text "type-error" :label "condition")
                                       (:id "type-error-datum" :text "type-error-datum" :label "function")
                                       (:id "type-error-expected-type" :text "type-error-expected-type" :label "function")
                                       (:id "type-of" :text "type-of" :label "function")
                                       (:id "typecase" :text "typecase" :label "macro")
                                       (:id "typep" :text "typep" :label "function")
                                       (:id "unbound-slot" :text "unbound-slot" :label "condition")
                                       (:id "unbound-slot-instance" :text "unbound-slot-instance" :label "function")
                                       (:id "unbound-variable" :text "unbound-variable" :label "condition")
                                       (:id "undefined-function" :text "undefined-function" :label "condition")
                                       (:id "unexport" :text "unexport" :label "function")
                                       (:id "unintern" :text "unintern" :label "function")
                                       (:id "union" :text "union" :label "function")
                                       (:id "loop-keyword-unless" :text "unless" :label "loop-keyword")
                                       (:id "unless" :text "unless" :label "macro")
                                       (:id "unread-char" :text "unread-char" :label "function")
                                       (:id "unsigned-byte" :text "unsigned-byte" :label "type-specifier")
                                       (:id "until" :text "until" :label "loop-keyword")
                                       (:id "untrace" :text "untrace" :label "macro")
                                       (:id "unuse-package" :text "unuse-package" :label "function")
                                       (:id "unwind-protect" :text "unwind-protect" :label "special")
                                       (:id "update-instance-for-different-class" :text "update-instance-for-different-class" :label "generic function")
                                       (:id "update-instance-for-redefined-class" :text "update-instance-for-redefined-class" :label "generic function")
                                       (:id "upfrom" :text "upfrom" :label "loop-keyword")
                                       (:id "upgraded-array-element-type" :text "upgraded-array-element-type" :label "function")
                                       (:id "upgraded-complex-part-type" :text "upgraded-complex-part-type" :label "function")
                                       (:id "upper-case-p" :text "upper-case-p" :label "function")
                                       (:id "upto" :text "upto" :label "loop-keyword")
                                       (:id "use-package" :text "use-package" :label "function")
                                       (:id "use-value" :text "use-value" :label "function")
                                       (:id "user-homedir-pathname" :text "user-homedir-pathname" :label "function")
                                       (:id "using" :text "using" :label "loop-keyword")
                                       (:id "literal-v" :text "v" :label "format control parameter")
                                       (:id "values" :text "values" :label "function")
                                       (:id "values-list" :text "values-list" :label "function")
                                       (:id "variable" :text "variable" :label "type-specifier")
                                       (:id "vector" :text "vector" :label "function")
                                       (:id "vector-pop" :text "vector-pop" :label "function")
                                       (:id "vector-push" :text "vector-push" :label "function")
                                       (:id "vector-push-extend" :text "vector-push-extend" :label "function")
                                       (:id "vectorp" :text "vectorp" :label "function")
                                       (:id "warn" :text "warn" :label "function")
                                       (:id "warning" :text "warning" :label "condition")
                                       (:id "loop-keyword-when" :text "when" :label "loop-keyword")
                                       (:id "when" :text "when" :label "macro")
                                       (:id "while" :text "while" :label "loop-keyword")
                                       (:id "wild-pathname-p" :text "wild-pathname-p" :label "function")
                                       (:id "with" :text "with" :label "loop-keyword")
                                       (:id "with-accessors" :text "with-accessors" :label "macro")
                                       (:id "with-compilation-unit" :text "with-compilation-unit" :label "macro")
                                       (:id "with-condition-restarts" :text "with-condition-restarts" :label "macro")
                                       (:id "with-hash-table-iterator" :text "with-hash-table-iterator" :label "macro")
                                       (:id "with-input-from-string" :text "with-input-from-string" :label "macro")
                                       (:id "with-open-file" :text "with-open-file" :label "macro")
                                       (:id "with-open-stream" :text "with-open-stream" :label "macro")
                                       (:id "with-output-to-string" :text "with-output-to-string" :label "macro")
                                       (:id "with-package-iterator" :text "with-package-iterator" :label "macro")
                                       (:id "with-simple-restart" :text "with-simple-restart" :label "macro")
                                       (:id "with-slots" :text "with-slots" :label "macro")
                                       (:id "with-standard-io-syntax" :text "with-standard-io-syntax" :label "macro")
                                       (:id "write" :text "write" :label "function")
                                       (:id "write-byte" :text "write-byte" :label "function")
                                       (:id "write-char" :text "write-char" :label "function")
                                       (:id "write-line" :text "write-line" :label "function")
                                       (:id "write-sequence" :text "write-sequence" :label "function")
                                       (:id "write-string" :text "write-string" :label "function")
                                       (:id "write-to-string" :text "write-to-string" :label "function")
                                       (:id "y-or-n-p" :text "y-or-n-p" :label "function")
                                       (:id "yes-or-no-p" :text "yes-or-no-p" :label "function")
                                       (:id "zerop" :text "zerop" :label "function")))

;; EOF
